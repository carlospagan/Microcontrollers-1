
ex09-lista04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042cc  080042cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042cc  080042cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  080042e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080042e4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008547  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ad  00000000  00000000  0002857f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acb8  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad6  00000000  00000000  00045a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af84f  00000000  00000000  0004e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdd75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db8  00000000  00000000  000fddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080041f4 	.word	0x080041f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080041f4 	.word	0x080041f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fa67 	bl	80016f8 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f8f7 	bl	8001424 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fd5e 	bl	8000d00 <__aeabi_dsub>
 8000244:	f001 f8ee 	bl	8001424 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ddiv>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	4681      	mov	r9, r0
 8000266:	0005      	movs	r5, r0
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	0048      	lsls	r0, r1, #1
 800026c:	4692      	mov	sl, r2
 800026e:	001f      	movs	r7, r3
 8000270:	b085      	sub	sp, #20
 8000272:	0b24      	lsrs	r4, r4, #12
 8000274:	0d40      	lsrs	r0, r0, #21
 8000276:	0fce      	lsrs	r6, r1, #31
 8000278:	2800      	cmp	r0, #0
 800027a:	d059      	beq.n	8000330 <__aeabi_ddiv+0xd8>
 800027c:	4b87      	ldr	r3, [pc, #540]	; (800049c <__aeabi_ddiv+0x244>)
 800027e:	4298      	cmp	r0, r3
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x2c>
 8000282:	e098      	b.n	80003b6 <__aeabi_ddiv+0x15e>
 8000284:	0f6b      	lsrs	r3, r5, #29
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	431c      	orrs	r4, r3
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	4323      	orrs	r3, r4
 8000290:	4698      	mov	r8, r3
 8000292:	4b83      	ldr	r3, [pc, #524]	; (80004a0 <__aeabi_ddiv+0x248>)
 8000294:	00ed      	lsls	r5, r5, #3
 8000296:	469b      	mov	fp, r3
 8000298:	2300      	movs	r3, #0
 800029a:	4699      	mov	r9, r3
 800029c:	4483      	add	fp, r0
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	033c      	lsls	r4, r7, #12
 80002a2:	007b      	lsls	r3, r7, #1
 80002a4:	4650      	mov	r0, sl
 80002a6:	0b24      	lsrs	r4, r4, #12
 80002a8:	0d5b      	lsrs	r3, r3, #21
 80002aa:	0fff      	lsrs	r7, r7, #31
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d067      	beq.n	8000380 <__aeabi_ddiv+0x128>
 80002b0:	4a7a      	ldr	r2, [pc, #488]	; (800049c <__aeabi_ddiv+0x244>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d018      	beq.n	80002e8 <__aeabi_ddiv+0x90>
 80002b6:	497a      	ldr	r1, [pc, #488]	; (80004a0 <__aeabi_ddiv+0x248>)
 80002b8:	0f42      	lsrs	r2, r0, #29
 80002ba:	468c      	mov	ip, r1
 80002bc:	00e4      	lsls	r4, r4, #3
 80002be:	4659      	mov	r1, fp
 80002c0:	4314      	orrs	r4, r2
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	4463      	add	r3, ip
 80002c6:	0412      	lsls	r2, r2, #16
 80002c8:	1acb      	subs	r3, r1, r3
 80002ca:	4314      	orrs	r4, r2
 80002cc:	469b      	mov	fp, r3
 80002ce:	00c2      	lsls	r2, r0, #3
 80002d0:	2000      	movs	r0, #0
 80002d2:	0033      	movs	r3, r6
 80002d4:	407b      	eors	r3, r7
 80002d6:	469a      	mov	sl, r3
 80002d8:	464b      	mov	r3, r9
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d900      	bls.n	80002e0 <__aeabi_ddiv+0x88>
 80002de:	e0ef      	b.n	80004c0 <__aeabi_ddiv+0x268>
 80002e0:	4970      	ldr	r1, [pc, #448]	; (80004a4 <__aeabi_ddiv+0x24c>)
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	58cb      	ldr	r3, [r1, r3]
 80002e6:	469f      	mov	pc, r3
 80002e8:	4b6f      	ldr	r3, [pc, #444]	; (80004a8 <__aeabi_ddiv+0x250>)
 80002ea:	4652      	mov	r2, sl
 80002ec:	469c      	mov	ip, r3
 80002ee:	4322      	orrs	r2, r4
 80002f0:	44e3      	add	fp, ip
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d000      	beq.n	80002f8 <__aeabi_ddiv+0xa0>
 80002f6:	e095      	b.n	8000424 <__aeabi_ddiv+0x1cc>
 80002f8:	4649      	mov	r1, r9
 80002fa:	2302      	movs	r3, #2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	4689      	mov	r9, r1
 8000300:	2400      	movs	r4, #0
 8000302:	2002      	movs	r0, #2
 8000304:	e7e5      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000306:	2300      	movs	r3, #0
 8000308:	2400      	movs	r4, #0
 800030a:	2500      	movs	r5, #0
 800030c:	4652      	mov	r2, sl
 800030e:	051b      	lsls	r3, r3, #20
 8000310:	4323      	orrs	r3, r4
 8000312:	07d2      	lsls	r2, r2, #31
 8000314:	4313      	orrs	r3, r2
 8000316:	0028      	movs	r0, r5
 8000318:	0019      	movs	r1, r3
 800031a:	b005      	add	sp, #20
 800031c:	bcf0      	pop	{r4, r5, r6, r7}
 800031e:	46bb      	mov	fp, r7
 8000320:	46b2      	mov	sl, r6
 8000322:	46a9      	mov	r9, r5
 8000324:	46a0      	mov	r8, r4
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000328:	2400      	movs	r4, #0
 800032a:	2500      	movs	r5, #0
 800032c:	4b5b      	ldr	r3, [pc, #364]	; (800049c <__aeabi_ddiv+0x244>)
 800032e:	e7ed      	b.n	800030c <__aeabi_ddiv+0xb4>
 8000330:	464b      	mov	r3, r9
 8000332:	4323      	orrs	r3, r4
 8000334:	4698      	mov	r8, r3
 8000336:	d100      	bne.n	800033a <__aeabi_ddiv+0xe2>
 8000338:	e089      	b.n	800044e <__aeabi_ddiv+0x1f6>
 800033a:	2c00      	cmp	r4, #0
 800033c:	d100      	bne.n	8000340 <__aeabi_ddiv+0xe8>
 800033e:	e1e0      	b.n	8000702 <__aeabi_ddiv+0x4aa>
 8000340:	0020      	movs	r0, r4
 8000342:	f001 f9e3 	bl	800170c <__clzsi2>
 8000346:	0001      	movs	r1, r0
 8000348:	0002      	movs	r2, r0
 800034a:	390b      	subs	r1, #11
 800034c:	231d      	movs	r3, #29
 800034e:	1a5b      	subs	r3, r3, r1
 8000350:	4649      	mov	r1, r9
 8000352:	0010      	movs	r0, r2
 8000354:	40d9      	lsrs	r1, r3
 8000356:	3808      	subs	r0, #8
 8000358:	4084      	lsls	r4, r0
 800035a:	000b      	movs	r3, r1
 800035c:	464d      	mov	r5, r9
 800035e:	4323      	orrs	r3, r4
 8000360:	4698      	mov	r8, r3
 8000362:	4085      	lsls	r5, r0
 8000364:	4851      	ldr	r0, [pc, #324]	; (80004ac <__aeabi_ddiv+0x254>)
 8000366:	033c      	lsls	r4, r7, #12
 8000368:	1a83      	subs	r3, r0, r2
 800036a:	469b      	mov	fp, r3
 800036c:	2300      	movs	r3, #0
 800036e:	4699      	mov	r9, r3
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	007b      	lsls	r3, r7, #1
 8000374:	4650      	mov	r0, sl
 8000376:	0b24      	lsrs	r4, r4, #12
 8000378:	0d5b      	lsrs	r3, r3, #21
 800037a:	0fff      	lsrs	r7, r7, #31
 800037c:	2b00      	cmp	r3, #0
 800037e:	d197      	bne.n	80002b0 <__aeabi_ddiv+0x58>
 8000380:	4652      	mov	r2, sl
 8000382:	4322      	orrs	r2, r4
 8000384:	d055      	beq.n	8000432 <__aeabi_ddiv+0x1da>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d100      	bne.n	800038c <__aeabi_ddiv+0x134>
 800038a:	e1ca      	b.n	8000722 <__aeabi_ddiv+0x4ca>
 800038c:	0020      	movs	r0, r4
 800038e:	f001 f9bd 	bl	800170c <__clzsi2>
 8000392:	0002      	movs	r2, r0
 8000394:	3a0b      	subs	r2, #11
 8000396:	231d      	movs	r3, #29
 8000398:	0001      	movs	r1, r0
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	4652      	mov	r2, sl
 800039e:	3908      	subs	r1, #8
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	408c      	lsls	r4, r1
 80003a4:	4314      	orrs	r4, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	408a      	lsls	r2, r1
 80003aa:	4b41      	ldr	r3, [pc, #260]	; (80004b0 <__aeabi_ddiv+0x258>)
 80003ac:	4458      	add	r0, fp
 80003ae:	469b      	mov	fp, r3
 80003b0:	4483      	add	fp, r0
 80003b2:	2000      	movs	r0, #0
 80003b4:	e78d      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 80003b6:	464b      	mov	r3, r9
 80003b8:	4323      	orrs	r3, r4
 80003ba:	4698      	mov	r8, r3
 80003bc:	d140      	bne.n	8000440 <__aeabi_ddiv+0x1e8>
 80003be:	2308      	movs	r3, #8
 80003c0:	4699      	mov	r9, r3
 80003c2:	3b06      	subs	r3, #6
 80003c4:	2500      	movs	r5, #0
 80003c6:	4683      	mov	fp, r0
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	e769      	b.n	80002a0 <__aeabi_ddiv+0x48>
 80003cc:	46b2      	mov	sl, r6
 80003ce:	9b00      	ldr	r3, [sp, #0]
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d0a9      	beq.n	8000328 <__aeabi_ddiv+0xd0>
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d100      	bne.n	80003da <__aeabi_ddiv+0x182>
 80003d8:	e211      	b.n	80007fe <__aeabi_ddiv+0x5a6>
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d093      	beq.n	8000306 <__aeabi_ddiv+0xae>
 80003de:	4a35      	ldr	r2, [pc, #212]	; (80004b4 <__aeabi_ddiv+0x25c>)
 80003e0:	445a      	add	r2, fp
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_ddiv+0x190>
 80003e6:	e13c      	b.n	8000662 <__aeabi_ddiv+0x40a>
 80003e8:	076b      	lsls	r3, r5, #29
 80003ea:	d000      	beq.n	80003ee <__aeabi_ddiv+0x196>
 80003ec:	e1a7      	b.n	800073e <__aeabi_ddiv+0x4e6>
 80003ee:	08ed      	lsrs	r5, r5, #3
 80003f0:	4643      	mov	r3, r8
 80003f2:	01db      	lsls	r3, r3, #7
 80003f4:	d506      	bpl.n	8000404 <__aeabi_ddiv+0x1ac>
 80003f6:	4642      	mov	r2, r8
 80003f8:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <__aeabi_ddiv+0x260>)
 80003fa:	401a      	ands	r2, r3
 80003fc:	4690      	mov	r8, r2
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	00d2      	lsls	r2, r2, #3
 8000402:	445a      	add	r2, fp
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <__aeabi_ddiv+0x264>)
 8000406:	429a      	cmp	r2, r3
 8000408:	dc8e      	bgt.n	8000328 <__aeabi_ddiv+0xd0>
 800040a:	4643      	mov	r3, r8
 800040c:	0552      	lsls	r2, r2, #21
 800040e:	0758      	lsls	r0, r3, #29
 8000410:	025c      	lsls	r4, r3, #9
 8000412:	4305      	orrs	r5, r0
 8000414:	0b24      	lsrs	r4, r4, #12
 8000416:	0d53      	lsrs	r3, r2, #21
 8000418:	e778      	b.n	800030c <__aeabi_ddiv+0xb4>
 800041a:	46ba      	mov	sl, r7
 800041c:	46a0      	mov	r8, r4
 800041e:	0015      	movs	r5, r2
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	e7d4      	b.n	80003ce <__aeabi_ddiv+0x176>
 8000424:	464a      	mov	r2, r9
 8000426:	2303      	movs	r3, #3
 8000428:	431a      	orrs	r2, r3
 800042a:	4691      	mov	r9, r2
 800042c:	2003      	movs	r0, #3
 800042e:	4652      	mov	r2, sl
 8000430:	e74f      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000432:	4649      	mov	r1, r9
 8000434:	2301      	movs	r3, #1
 8000436:	4319      	orrs	r1, r3
 8000438:	4689      	mov	r9, r1
 800043a:	2400      	movs	r4, #0
 800043c:	2001      	movs	r0, #1
 800043e:	e748      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000440:	230c      	movs	r3, #12
 8000442:	4699      	mov	r9, r3
 8000444:	3b09      	subs	r3, #9
 8000446:	46a0      	mov	r8, r4
 8000448:	4683      	mov	fp, r0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	e728      	b.n	80002a0 <__aeabi_ddiv+0x48>
 800044e:	2304      	movs	r3, #4
 8000450:	4699      	mov	r9, r3
 8000452:	2300      	movs	r3, #0
 8000454:	469b      	mov	fp, r3
 8000456:	3301      	adds	r3, #1
 8000458:	2500      	movs	r5, #0
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	e720      	b.n	80002a0 <__aeabi_ddiv+0x48>
 800045e:	2300      	movs	r3, #0
 8000460:	2480      	movs	r4, #128	; 0x80
 8000462:	469a      	mov	sl, r3
 8000464:	2500      	movs	r5, #0
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <__aeabi_ddiv+0x244>)
 8000468:	0324      	lsls	r4, r4, #12
 800046a:	e74f      	b.n	800030c <__aeabi_ddiv+0xb4>
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	4641      	mov	r1, r8
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	4219      	tst	r1, r3
 8000474:	d008      	beq.n	8000488 <__aeabi_ddiv+0x230>
 8000476:	421c      	tst	r4, r3
 8000478:	d106      	bne.n	8000488 <__aeabi_ddiv+0x230>
 800047a:	431c      	orrs	r4, r3
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	46ba      	mov	sl, r7
 8000480:	0015      	movs	r5, r2
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <__aeabi_ddiv+0x244>)
 8000484:	0b24      	lsrs	r4, r4, #12
 8000486:	e741      	b.n	800030c <__aeabi_ddiv+0xb4>
 8000488:	2480      	movs	r4, #128	; 0x80
 800048a:	4643      	mov	r3, r8
 800048c:	0324      	lsls	r4, r4, #12
 800048e:	431c      	orrs	r4, r3
 8000490:	0324      	lsls	r4, r4, #12
 8000492:	46b2      	mov	sl, r6
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <__aeabi_ddiv+0x244>)
 8000496:	0b24      	lsrs	r4, r4, #12
 8000498:	e738      	b.n	800030c <__aeabi_ddiv+0xb4>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	000007ff 	.word	0x000007ff
 80004a0:	fffffc01 	.word	0xfffffc01
 80004a4:	0800420c 	.word	0x0800420c
 80004a8:	fffff801 	.word	0xfffff801
 80004ac:	fffffc0d 	.word	0xfffffc0d
 80004b0:	000003f3 	.word	0x000003f3
 80004b4:	000003ff 	.word	0x000003ff
 80004b8:	feffffff 	.word	0xfeffffff
 80004bc:	000007fe 	.word	0x000007fe
 80004c0:	4544      	cmp	r4, r8
 80004c2:	d200      	bcs.n	80004c6 <__aeabi_ddiv+0x26e>
 80004c4:	e116      	b.n	80006f4 <__aeabi_ddiv+0x49c>
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0x272>
 80004c8:	e111      	b.n	80006ee <__aeabi_ddiv+0x496>
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	469c      	mov	ip, r3
 80004d0:	002e      	movs	r6, r5
 80004d2:	4640      	mov	r0, r8
 80004d4:	2500      	movs	r5, #0
 80004d6:	44e3      	add	fp, ip
 80004d8:	0223      	lsls	r3, r4, #8
 80004da:	0e14      	lsrs	r4, r2, #24
 80004dc:	431c      	orrs	r4, r3
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	4699      	mov	r9, r3
 80004e2:	0423      	lsls	r3, r4, #16
 80004e4:	0c1f      	lsrs	r7, r3, #16
 80004e6:	0212      	lsls	r2, r2, #8
 80004e8:	4649      	mov	r1, r9
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9701      	str	r7, [sp, #4]
 80004ee:	f7ff fe8f 	bl	8000210 <__aeabi_uidivmod>
 80004f2:	0002      	movs	r2, r0
 80004f4:	437a      	muls	r2, r7
 80004f6:	040b      	lsls	r3, r1, #16
 80004f8:	0c31      	lsrs	r1, r6, #16
 80004fa:	4680      	mov	r8, r0
 80004fc:	4319      	orrs	r1, r3
 80004fe:	428a      	cmp	r2, r1
 8000500:	d90b      	bls.n	800051a <__aeabi_ddiv+0x2c2>
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	469c      	mov	ip, r3
 8000508:	1909      	adds	r1, r1, r4
 800050a:	44e0      	add	r8, ip
 800050c:	428c      	cmp	r4, r1
 800050e:	d804      	bhi.n	800051a <__aeabi_ddiv+0x2c2>
 8000510:	428a      	cmp	r2, r1
 8000512:	d902      	bls.n	800051a <__aeabi_ddiv+0x2c2>
 8000514:	1e83      	subs	r3, r0, #2
 8000516:	4698      	mov	r8, r3
 8000518:	1909      	adds	r1, r1, r4
 800051a:	1a88      	subs	r0, r1, r2
 800051c:	4649      	mov	r1, r9
 800051e:	f7ff fe77 	bl	8000210 <__aeabi_uidivmod>
 8000522:	0409      	lsls	r1, r1, #16
 8000524:	468c      	mov	ip, r1
 8000526:	0431      	lsls	r1, r6, #16
 8000528:	4666      	mov	r6, ip
 800052a:	9a01      	ldr	r2, [sp, #4]
 800052c:	0c09      	lsrs	r1, r1, #16
 800052e:	4342      	muls	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	4331      	orrs	r1, r6
 8000534:	428a      	cmp	r2, r1
 8000536:	d904      	bls.n	8000542 <__aeabi_ddiv+0x2ea>
 8000538:	1909      	adds	r1, r1, r4
 800053a:	3b01      	subs	r3, #1
 800053c:	428c      	cmp	r4, r1
 800053e:	d800      	bhi.n	8000542 <__aeabi_ddiv+0x2ea>
 8000540:	e111      	b.n	8000766 <__aeabi_ddiv+0x50e>
 8000542:	1a89      	subs	r1, r1, r2
 8000544:	4642      	mov	r2, r8
 8000546:	9e00      	ldr	r6, [sp, #0]
 8000548:	0412      	lsls	r2, r2, #16
 800054a:	431a      	orrs	r2, r3
 800054c:	0c33      	lsrs	r3, r6, #16
 800054e:	001f      	movs	r7, r3
 8000550:	0c10      	lsrs	r0, r2, #16
 8000552:	4690      	mov	r8, r2
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	0413      	lsls	r3, r2, #16
 8000558:	0432      	lsls	r2, r6, #16
 800055a:	0c16      	lsrs	r6, r2, #16
 800055c:	0032      	movs	r2, r6
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	435a      	muls	r2, r3
 8000562:	9603      	str	r6, [sp, #12]
 8000564:	437b      	muls	r3, r7
 8000566:	4346      	muls	r6, r0
 8000568:	4378      	muls	r0, r7
 800056a:	0c17      	lsrs	r7, r2, #16
 800056c:	46bc      	mov	ip, r7
 800056e:	199b      	adds	r3, r3, r6
 8000570:	4463      	add	r3, ip
 8000572:	429e      	cmp	r6, r3
 8000574:	d903      	bls.n	800057e <__aeabi_ddiv+0x326>
 8000576:	2680      	movs	r6, #128	; 0x80
 8000578:	0276      	lsls	r6, r6, #9
 800057a:	46b4      	mov	ip, r6
 800057c:	4460      	add	r0, ip
 800057e:	0c1e      	lsrs	r6, r3, #16
 8000580:	1830      	adds	r0, r6, r0
 8000582:	0416      	lsls	r6, r2, #16
 8000584:	041b      	lsls	r3, r3, #16
 8000586:	0c36      	lsrs	r6, r6, #16
 8000588:	199e      	adds	r6, r3, r6
 800058a:	4281      	cmp	r1, r0
 800058c:	d200      	bcs.n	8000590 <__aeabi_ddiv+0x338>
 800058e:	e09c      	b.n	80006ca <__aeabi_ddiv+0x472>
 8000590:	d100      	bne.n	8000594 <__aeabi_ddiv+0x33c>
 8000592:	e097      	b.n	80006c4 <__aeabi_ddiv+0x46c>
 8000594:	1bae      	subs	r6, r5, r6
 8000596:	1a09      	subs	r1, r1, r0
 8000598:	42b5      	cmp	r5, r6
 800059a:	4180      	sbcs	r0, r0
 800059c:	4240      	negs	r0, r0
 800059e:	1a08      	subs	r0, r1, r0
 80005a0:	4284      	cmp	r4, r0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_ddiv+0x34e>
 80005a4:	e111      	b.n	80007ca <__aeabi_ddiv+0x572>
 80005a6:	4649      	mov	r1, r9
 80005a8:	f7ff fe32 	bl	8000210 <__aeabi_uidivmod>
 80005ac:	9a01      	ldr	r2, [sp, #4]
 80005ae:	040b      	lsls	r3, r1, #16
 80005b0:	4342      	muls	r2, r0
 80005b2:	0c31      	lsrs	r1, r6, #16
 80005b4:	0005      	movs	r5, r0
 80005b6:	4319      	orrs	r1, r3
 80005b8:	428a      	cmp	r2, r1
 80005ba:	d907      	bls.n	80005cc <__aeabi_ddiv+0x374>
 80005bc:	1909      	adds	r1, r1, r4
 80005be:	3d01      	subs	r5, #1
 80005c0:	428c      	cmp	r4, r1
 80005c2:	d803      	bhi.n	80005cc <__aeabi_ddiv+0x374>
 80005c4:	428a      	cmp	r2, r1
 80005c6:	d901      	bls.n	80005cc <__aeabi_ddiv+0x374>
 80005c8:	1e85      	subs	r5, r0, #2
 80005ca:	1909      	adds	r1, r1, r4
 80005cc:	1a88      	subs	r0, r1, r2
 80005ce:	4649      	mov	r1, r9
 80005d0:	f7ff fe1e 	bl	8000210 <__aeabi_uidivmod>
 80005d4:	0409      	lsls	r1, r1, #16
 80005d6:	468c      	mov	ip, r1
 80005d8:	0431      	lsls	r1, r6, #16
 80005da:	4666      	mov	r6, ip
 80005dc:	9a01      	ldr	r2, [sp, #4]
 80005de:	0c09      	lsrs	r1, r1, #16
 80005e0:	4342      	muls	r2, r0
 80005e2:	0003      	movs	r3, r0
 80005e4:	4331      	orrs	r1, r6
 80005e6:	428a      	cmp	r2, r1
 80005e8:	d907      	bls.n	80005fa <__aeabi_ddiv+0x3a2>
 80005ea:	1909      	adds	r1, r1, r4
 80005ec:	3b01      	subs	r3, #1
 80005ee:	428c      	cmp	r4, r1
 80005f0:	d803      	bhi.n	80005fa <__aeabi_ddiv+0x3a2>
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d901      	bls.n	80005fa <__aeabi_ddiv+0x3a2>
 80005f6:	1e83      	subs	r3, r0, #2
 80005f8:	1909      	adds	r1, r1, r4
 80005fa:	9e03      	ldr	r6, [sp, #12]
 80005fc:	1a89      	subs	r1, r1, r2
 80005fe:	0032      	movs	r2, r6
 8000600:	042d      	lsls	r5, r5, #16
 8000602:	431d      	orrs	r5, r3
 8000604:	9f02      	ldr	r7, [sp, #8]
 8000606:	042b      	lsls	r3, r5, #16
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	435a      	muls	r2, r3
 800060c:	437b      	muls	r3, r7
 800060e:	469c      	mov	ip, r3
 8000610:	0c28      	lsrs	r0, r5, #16
 8000612:	4346      	muls	r6, r0
 8000614:	0c13      	lsrs	r3, r2, #16
 8000616:	44b4      	add	ip, r6
 8000618:	4463      	add	r3, ip
 800061a:	4378      	muls	r0, r7
 800061c:	429e      	cmp	r6, r3
 800061e:	d903      	bls.n	8000628 <__aeabi_ddiv+0x3d0>
 8000620:	2680      	movs	r6, #128	; 0x80
 8000622:	0276      	lsls	r6, r6, #9
 8000624:	46b4      	mov	ip, r6
 8000626:	4460      	add	r0, ip
 8000628:	0c1e      	lsrs	r6, r3, #16
 800062a:	0412      	lsls	r2, r2, #16
 800062c:	041b      	lsls	r3, r3, #16
 800062e:	0c12      	lsrs	r2, r2, #16
 8000630:	1830      	adds	r0, r6, r0
 8000632:	189b      	adds	r3, r3, r2
 8000634:	4281      	cmp	r1, r0
 8000636:	d306      	bcc.n	8000646 <__aeabi_ddiv+0x3ee>
 8000638:	d002      	beq.n	8000640 <__aeabi_ddiv+0x3e8>
 800063a:	2301      	movs	r3, #1
 800063c:	431d      	orrs	r5, r3
 800063e:	e6ce      	b.n	80003de <__aeabi_ddiv+0x186>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_ddiv+0x3ee>
 8000644:	e6cb      	b.n	80003de <__aeabi_ddiv+0x186>
 8000646:	1861      	adds	r1, r4, r1
 8000648:	1e6e      	subs	r6, r5, #1
 800064a:	42a1      	cmp	r1, r4
 800064c:	d200      	bcs.n	8000650 <__aeabi_ddiv+0x3f8>
 800064e:	e0a4      	b.n	800079a <__aeabi_ddiv+0x542>
 8000650:	4281      	cmp	r1, r0
 8000652:	d200      	bcs.n	8000656 <__aeabi_ddiv+0x3fe>
 8000654:	e0c9      	b.n	80007ea <__aeabi_ddiv+0x592>
 8000656:	d100      	bne.n	800065a <__aeabi_ddiv+0x402>
 8000658:	e0d9      	b.n	800080e <__aeabi_ddiv+0x5b6>
 800065a:	0035      	movs	r5, r6
 800065c:	e7ed      	b.n	800063a <__aeabi_ddiv+0x3e2>
 800065e:	2501      	movs	r5, #1
 8000660:	426d      	negs	r5, r5
 8000662:	2101      	movs	r1, #1
 8000664:	1a89      	subs	r1, r1, r2
 8000666:	2938      	cmp	r1, #56	; 0x38
 8000668:	dd00      	ble.n	800066c <__aeabi_ddiv+0x414>
 800066a:	e64c      	b.n	8000306 <__aeabi_ddiv+0xae>
 800066c:	291f      	cmp	r1, #31
 800066e:	dc00      	bgt.n	8000672 <__aeabi_ddiv+0x41a>
 8000670:	e07f      	b.n	8000772 <__aeabi_ddiv+0x51a>
 8000672:	231f      	movs	r3, #31
 8000674:	425b      	negs	r3, r3
 8000676:	1a9a      	subs	r2, r3, r2
 8000678:	4643      	mov	r3, r8
 800067a:	40d3      	lsrs	r3, r2
 800067c:	2920      	cmp	r1, #32
 800067e:	d004      	beq.n	800068a <__aeabi_ddiv+0x432>
 8000680:	4644      	mov	r4, r8
 8000682:	4a65      	ldr	r2, [pc, #404]	; (8000818 <__aeabi_ddiv+0x5c0>)
 8000684:	445a      	add	r2, fp
 8000686:	4094      	lsls	r4, r2
 8000688:	4325      	orrs	r5, r4
 800068a:	1e6a      	subs	r2, r5, #1
 800068c:	4195      	sbcs	r5, r2
 800068e:	2207      	movs	r2, #7
 8000690:	432b      	orrs	r3, r5
 8000692:	0015      	movs	r5, r2
 8000694:	2400      	movs	r4, #0
 8000696:	401d      	ands	r5, r3
 8000698:	421a      	tst	r2, r3
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x446>
 800069c:	e0a1      	b.n	80007e2 <__aeabi_ddiv+0x58a>
 800069e:	220f      	movs	r2, #15
 80006a0:	2400      	movs	r4, #0
 80006a2:	401a      	ands	r2, r3
 80006a4:	2a04      	cmp	r2, #4
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x452>
 80006a8:	e098      	b.n	80007dc <__aeabi_ddiv+0x584>
 80006aa:	1d1a      	adds	r2, r3, #4
 80006ac:	429a      	cmp	r2, r3
 80006ae:	419b      	sbcs	r3, r3
 80006b0:	425b      	negs	r3, r3
 80006b2:	18e4      	adds	r4, r4, r3
 80006b4:	0013      	movs	r3, r2
 80006b6:	0222      	lsls	r2, r4, #8
 80006b8:	d400      	bmi.n	80006bc <__aeabi_ddiv+0x464>
 80006ba:	e08f      	b.n	80007dc <__aeabi_ddiv+0x584>
 80006bc:	2301      	movs	r3, #1
 80006be:	2400      	movs	r4, #0
 80006c0:	2500      	movs	r5, #0
 80006c2:	e623      	b.n	800030c <__aeabi_ddiv+0xb4>
 80006c4:	42b5      	cmp	r5, r6
 80006c6:	d300      	bcc.n	80006ca <__aeabi_ddiv+0x472>
 80006c8:	e764      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1e5a      	subs	r2, r3, #1
 80006ce:	9b00      	ldr	r3, [sp, #0]
 80006d0:	469c      	mov	ip, r3
 80006d2:	4465      	add	r5, ip
 80006d4:	001f      	movs	r7, r3
 80006d6:	429d      	cmp	r5, r3
 80006d8:	419b      	sbcs	r3, r3
 80006da:	425b      	negs	r3, r3
 80006dc:	191b      	adds	r3, r3, r4
 80006de:	18c9      	adds	r1, r1, r3
 80006e0:	428c      	cmp	r4, r1
 80006e2:	d23a      	bcs.n	800075a <__aeabi_ddiv+0x502>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	d863      	bhi.n	80007b0 <__aeabi_ddiv+0x558>
 80006e8:	d060      	beq.n	80007ac <__aeabi_ddiv+0x554>
 80006ea:	4690      	mov	r8, r2
 80006ec:	e752      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80006ee:	42aa      	cmp	r2, r5
 80006f0:	d900      	bls.n	80006f4 <__aeabi_ddiv+0x49c>
 80006f2:	e6ea      	b.n	80004ca <__aeabi_ddiv+0x272>
 80006f4:	4643      	mov	r3, r8
 80006f6:	07de      	lsls	r6, r3, #31
 80006f8:	0858      	lsrs	r0, r3, #1
 80006fa:	086b      	lsrs	r3, r5, #1
 80006fc:	431e      	orrs	r6, r3
 80006fe:	07ed      	lsls	r5, r5, #31
 8000700:	e6ea      	b.n	80004d8 <__aeabi_ddiv+0x280>
 8000702:	4648      	mov	r0, r9
 8000704:	f001 f802 	bl	800170c <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0002      	movs	r2, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3220      	adds	r2, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dc00      	bgt.n	8000716 <__aeabi_ddiv+0x4be>
 8000714:	e61a      	b.n	800034c <__aeabi_ddiv+0xf4>
 8000716:	464b      	mov	r3, r9
 8000718:	3808      	subs	r0, #8
 800071a:	4083      	lsls	r3, r0
 800071c:	2500      	movs	r5, #0
 800071e:	4698      	mov	r8, r3
 8000720:	e620      	b.n	8000364 <__aeabi_ddiv+0x10c>
 8000722:	f000 fff3 	bl	800170c <__clzsi2>
 8000726:	0003      	movs	r3, r0
 8000728:	001a      	movs	r2, r3
 800072a:	3215      	adds	r2, #21
 800072c:	3020      	adds	r0, #32
 800072e:	2a1c      	cmp	r2, #28
 8000730:	dc00      	bgt.n	8000734 <__aeabi_ddiv+0x4dc>
 8000732:	e630      	b.n	8000396 <__aeabi_ddiv+0x13e>
 8000734:	4654      	mov	r4, sl
 8000736:	3b08      	subs	r3, #8
 8000738:	2200      	movs	r2, #0
 800073a:	409c      	lsls	r4, r3
 800073c:	e635      	b.n	80003aa <__aeabi_ddiv+0x152>
 800073e:	230f      	movs	r3, #15
 8000740:	402b      	ands	r3, r5
 8000742:	2b04      	cmp	r3, #4
 8000744:	d100      	bne.n	8000748 <__aeabi_ddiv+0x4f0>
 8000746:	e652      	b.n	80003ee <__aeabi_ddiv+0x196>
 8000748:	2305      	movs	r3, #5
 800074a:	425b      	negs	r3, r3
 800074c:	42ab      	cmp	r3, r5
 800074e:	419b      	sbcs	r3, r3
 8000750:	3504      	adds	r5, #4
 8000752:	425b      	negs	r3, r3
 8000754:	08ed      	lsrs	r5, r5, #3
 8000756:	4498      	add	r8, r3
 8000758:	e64a      	b.n	80003f0 <__aeabi_ddiv+0x198>
 800075a:	428c      	cmp	r4, r1
 800075c:	d1c5      	bne.n	80006ea <__aeabi_ddiv+0x492>
 800075e:	42af      	cmp	r7, r5
 8000760:	d9c0      	bls.n	80006e4 <__aeabi_ddiv+0x48c>
 8000762:	4690      	mov	r8, r2
 8000764:	e716      	b.n	8000594 <__aeabi_ddiv+0x33c>
 8000766:	428a      	cmp	r2, r1
 8000768:	d800      	bhi.n	800076c <__aeabi_ddiv+0x514>
 800076a:	e6ea      	b.n	8000542 <__aeabi_ddiv+0x2ea>
 800076c:	1e83      	subs	r3, r0, #2
 800076e:	1909      	adds	r1, r1, r4
 8000770:	e6e7      	b.n	8000542 <__aeabi_ddiv+0x2ea>
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <__aeabi_ddiv+0x5c4>)
 8000774:	0028      	movs	r0, r5
 8000776:	445a      	add	r2, fp
 8000778:	4643      	mov	r3, r8
 800077a:	4095      	lsls	r5, r2
 800077c:	4093      	lsls	r3, r2
 800077e:	40c8      	lsrs	r0, r1
 8000780:	1e6a      	subs	r2, r5, #1
 8000782:	4195      	sbcs	r5, r2
 8000784:	4644      	mov	r4, r8
 8000786:	4303      	orrs	r3, r0
 8000788:	432b      	orrs	r3, r5
 800078a:	40cc      	lsrs	r4, r1
 800078c:	075a      	lsls	r2, r3, #29
 800078e:	d092      	beq.n	80006b6 <__aeabi_ddiv+0x45e>
 8000790:	220f      	movs	r2, #15
 8000792:	401a      	ands	r2, r3
 8000794:	2a04      	cmp	r2, #4
 8000796:	d188      	bne.n	80006aa <__aeabi_ddiv+0x452>
 8000798:	e78d      	b.n	80006b6 <__aeabi_ddiv+0x45e>
 800079a:	0035      	movs	r5, r6
 800079c:	4281      	cmp	r1, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x54a>
 80007a0:	e74b      	b.n	800063a <__aeabi_ddiv+0x3e2>
 80007a2:	9a00      	ldr	r2, [sp, #0]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_ddiv+0x552>
 80007a8:	e747      	b.n	800063a <__aeabi_ddiv+0x3e2>
 80007aa:	e618      	b.n	80003de <__aeabi_ddiv+0x186>
 80007ac:	42ae      	cmp	r6, r5
 80007ae:	d99c      	bls.n	80006ea <__aeabi_ddiv+0x492>
 80007b0:	2302      	movs	r3, #2
 80007b2:	425b      	negs	r3, r3
 80007b4:	469c      	mov	ip, r3
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	44e0      	add	r8, ip
 80007ba:	469c      	mov	ip, r3
 80007bc:	4465      	add	r5, ip
 80007be:	429d      	cmp	r5, r3
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	425b      	negs	r3, r3
 80007c4:	191b      	adds	r3, r3, r4
 80007c6:	18c9      	adds	r1, r1, r3
 80007c8:	e6e4      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <__aeabi_ddiv+0x5c8>)
 80007cc:	445a      	add	r2, fp
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_ddiv+0x57c>
 80007d2:	e744      	b.n	800065e <__aeabi_ddiv+0x406>
 80007d4:	2301      	movs	r3, #1
 80007d6:	2500      	movs	r5, #0
 80007d8:	4498      	add	r8, r3
 80007da:	e609      	b.n	80003f0 <__aeabi_ddiv+0x198>
 80007dc:	0765      	lsls	r5, r4, #29
 80007de:	0264      	lsls	r4, r4, #9
 80007e0:	0b24      	lsrs	r4, r4, #12
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	431d      	orrs	r5, r3
 80007e6:	2300      	movs	r3, #0
 80007e8:	e590      	b.n	800030c <__aeabi_ddiv+0xb4>
 80007ea:	9e00      	ldr	r6, [sp, #0]
 80007ec:	3d02      	subs	r5, #2
 80007ee:	0072      	lsls	r2, r6, #1
 80007f0:	42b2      	cmp	r2, r6
 80007f2:	41bf      	sbcs	r7, r7
 80007f4:	427f      	negs	r7, r7
 80007f6:	193c      	adds	r4, r7, r4
 80007f8:	1909      	adds	r1, r1, r4
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	e7ce      	b.n	800079c <__aeabi_ddiv+0x544>
 80007fe:	2480      	movs	r4, #128	; 0x80
 8000800:	4643      	mov	r3, r8
 8000802:	0324      	lsls	r4, r4, #12
 8000804:	431c      	orrs	r4, r3
 8000806:	0324      	lsls	r4, r4, #12
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800080a:	0b24      	lsrs	r4, r4, #12
 800080c:	e57e      	b.n	800030c <__aeabi_ddiv+0xb4>
 800080e:	9a00      	ldr	r2, [sp, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3ea      	bcc.n	80007ea <__aeabi_ddiv+0x592>
 8000814:	0035      	movs	r5, r6
 8000816:	e7c4      	b.n	80007a2 <__aeabi_ddiv+0x54a>
 8000818:	0000043e 	.word	0x0000043e
 800081c:	0000041e 	.word	0x0000041e
 8000820:	000003ff 	.word	0x000003ff
 8000824:	000007ff 	.word	0x000007ff

08000828 <__aeabi_dmul>:
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	4657      	mov	r7, sl
 800082c:	464e      	mov	r6, r9
 800082e:	4645      	mov	r5, r8
 8000830:	46de      	mov	lr, fp
 8000832:	b5e0      	push	{r5, r6, r7, lr}
 8000834:	4698      	mov	r8, r3
 8000836:	030c      	lsls	r4, r1, #12
 8000838:	004b      	lsls	r3, r1, #1
 800083a:	0006      	movs	r6, r0
 800083c:	4692      	mov	sl, r2
 800083e:	b087      	sub	sp, #28
 8000840:	0b24      	lsrs	r4, r4, #12
 8000842:	0d5b      	lsrs	r3, r3, #21
 8000844:	0fcf      	lsrs	r7, r1, #31
 8000846:	2b00      	cmp	r3, #0
 8000848:	d06c      	beq.n	8000924 <__aeabi_dmul+0xfc>
 800084a:	4add      	ldr	r2, [pc, #884]	; (8000bc0 <__aeabi_dmul+0x398>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d100      	bne.n	8000852 <__aeabi_dmul+0x2a>
 8000850:	e086      	b.n	8000960 <__aeabi_dmul+0x138>
 8000852:	0f42      	lsrs	r2, r0, #29
 8000854:	00e4      	lsls	r4, r4, #3
 8000856:	4314      	orrs	r4, r2
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0412      	lsls	r2, r2, #16
 800085c:	4314      	orrs	r4, r2
 800085e:	4ad9      	ldr	r2, [pc, #868]	; (8000bc4 <__aeabi_dmul+0x39c>)
 8000860:	00c5      	lsls	r5, r0, #3
 8000862:	4694      	mov	ip, r2
 8000864:	4463      	add	r3, ip
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2300      	movs	r3, #0
 800086a:	4699      	mov	r9, r3
 800086c:	469b      	mov	fp, r3
 800086e:	4643      	mov	r3, r8
 8000870:	4642      	mov	r2, r8
 8000872:	031e      	lsls	r6, r3, #12
 8000874:	0fd2      	lsrs	r2, r2, #31
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4650      	mov	r0, sl
 800087a:	4690      	mov	r8, r2
 800087c:	0b36      	lsrs	r6, r6, #12
 800087e:	0d5b      	lsrs	r3, r3, #21
 8000880:	d100      	bne.n	8000884 <__aeabi_dmul+0x5c>
 8000882:	e078      	b.n	8000976 <__aeabi_dmul+0x14e>
 8000884:	4ace      	ldr	r2, [pc, #824]	; (8000bc0 <__aeabi_dmul+0x398>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d01d      	beq.n	80008c6 <__aeabi_dmul+0x9e>
 800088a:	49ce      	ldr	r1, [pc, #824]	; (8000bc4 <__aeabi_dmul+0x39c>)
 800088c:	0f42      	lsrs	r2, r0, #29
 800088e:	468c      	mov	ip, r1
 8000890:	9900      	ldr	r1, [sp, #0]
 8000892:	4463      	add	r3, ip
 8000894:	00f6      	lsls	r6, r6, #3
 8000896:	468c      	mov	ip, r1
 8000898:	4316      	orrs	r6, r2
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	449c      	add	ip, r3
 800089e:	0412      	lsls	r2, r2, #16
 80008a0:	4663      	mov	r3, ip
 80008a2:	4316      	orrs	r6, r2
 80008a4:	00c2      	lsls	r2, r0, #3
 80008a6:	2000      	movs	r0, #0
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	9900      	ldr	r1, [sp, #0]
 80008ac:	4643      	mov	r3, r8
 80008ae:	3101      	adds	r1, #1
 80008b0:	468c      	mov	ip, r1
 80008b2:	4649      	mov	r1, r9
 80008b4:	407b      	eors	r3, r7
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	290f      	cmp	r1, #15
 80008ba:	d900      	bls.n	80008be <__aeabi_dmul+0x96>
 80008bc:	e07e      	b.n	80009bc <__aeabi_dmul+0x194>
 80008be:	4bc2      	ldr	r3, [pc, #776]	; (8000bc8 <__aeabi_dmul+0x3a0>)
 80008c0:	0089      	lsls	r1, r1, #2
 80008c2:	5859      	ldr	r1, [r3, r1]
 80008c4:	468f      	mov	pc, r1
 80008c6:	4652      	mov	r2, sl
 80008c8:	9b00      	ldr	r3, [sp, #0]
 80008ca:	4332      	orrs	r2, r6
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dmul+0xa8>
 80008ce:	e156      	b.n	8000b7e <__aeabi_dmul+0x356>
 80008d0:	49bb      	ldr	r1, [pc, #748]	; (8000bc0 <__aeabi_dmul+0x398>)
 80008d2:	2600      	movs	r6, #0
 80008d4:	468c      	mov	ip, r1
 80008d6:	4463      	add	r3, ip
 80008d8:	4649      	mov	r1, r9
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2302      	movs	r3, #2
 80008de:	4319      	orrs	r1, r3
 80008e0:	4689      	mov	r9, r1
 80008e2:	2002      	movs	r0, #2
 80008e4:	e7e1      	b.n	80008aa <__aeabi_dmul+0x82>
 80008e6:	4643      	mov	r3, r8
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	0034      	movs	r4, r6
 80008ec:	0015      	movs	r5, r2
 80008ee:	4683      	mov	fp, r0
 80008f0:	465b      	mov	r3, fp
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d05e      	beq.n	80009b4 <__aeabi_dmul+0x18c>
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d100      	bne.n	80008fc <__aeabi_dmul+0xd4>
 80008fa:	e1f3      	b.n	8000ce4 <__aeabi_dmul+0x4bc>
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d000      	beq.n	8000902 <__aeabi_dmul+0xda>
 8000900:	e118      	b.n	8000b34 <__aeabi_dmul+0x30c>
 8000902:	2200      	movs	r2, #0
 8000904:	2400      	movs	r4, #0
 8000906:	2500      	movs	r5, #0
 8000908:	9b01      	ldr	r3, [sp, #4]
 800090a:	0512      	lsls	r2, r2, #20
 800090c:	4322      	orrs	r2, r4
 800090e:	07db      	lsls	r3, r3, #31
 8000910:	431a      	orrs	r2, r3
 8000912:	0028      	movs	r0, r5
 8000914:	0011      	movs	r1, r2
 8000916:	b007      	add	sp, #28
 8000918:	bcf0      	pop	{r4, r5, r6, r7}
 800091a:	46bb      	mov	fp, r7
 800091c:	46b2      	mov	sl, r6
 800091e:	46a9      	mov	r9, r5
 8000920:	46a0      	mov	r8, r4
 8000922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000924:	0025      	movs	r5, r4
 8000926:	4305      	orrs	r5, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dmul+0x104>
 800092a:	e141      	b.n	8000bb0 <__aeabi_dmul+0x388>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dmul+0x10a>
 8000930:	e1ad      	b.n	8000c8e <__aeabi_dmul+0x466>
 8000932:	0020      	movs	r0, r4
 8000934:	f000 feea 	bl	800170c <__clzsi2>
 8000938:	0001      	movs	r1, r0
 800093a:	0002      	movs	r2, r0
 800093c:	390b      	subs	r1, #11
 800093e:	231d      	movs	r3, #29
 8000940:	0010      	movs	r0, r2
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	0031      	movs	r1, r6
 8000946:	0035      	movs	r5, r6
 8000948:	3808      	subs	r0, #8
 800094a:	4084      	lsls	r4, r0
 800094c:	40d9      	lsrs	r1, r3
 800094e:	4085      	lsls	r5, r0
 8000950:	430c      	orrs	r4, r1
 8000952:	489e      	ldr	r0, [pc, #632]	; (8000bcc <__aeabi_dmul+0x3a4>)
 8000954:	1a83      	subs	r3, r0, r2
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	4699      	mov	r9, r3
 800095c:	469b      	mov	fp, r3
 800095e:	e786      	b.n	800086e <__aeabi_dmul+0x46>
 8000960:	0005      	movs	r5, r0
 8000962:	4325      	orrs	r5, r4
 8000964:	d000      	beq.n	8000968 <__aeabi_dmul+0x140>
 8000966:	e11c      	b.n	8000ba2 <__aeabi_dmul+0x37a>
 8000968:	2208      	movs	r2, #8
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	2400      	movs	r4, #0
 8000970:	4691      	mov	r9, r2
 8000972:	469b      	mov	fp, r3
 8000974:	e77b      	b.n	800086e <__aeabi_dmul+0x46>
 8000976:	4652      	mov	r2, sl
 8000978:	4332      	orrs	r2, r6
 800097a:	d100      	bne.n	800097e <__aeabi_dmul+0x156>
 800097c:	e10a      	b.n	8000b94 <__aeabi_dmul+0x36c>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d100      	bne.n	8000984 <__aeabi_dmul+0x15c>
 8000982:	e176      	b.n	8000c72 <__aeabi_dmul+0x44a>
 8000984:	0030      	movs	r0, r6
 8000986:	f000 fec1 	bl	800170c <__clzsi2>
 800098a:	0002      	movs	r2, r0
 800098c:	3a0b      	subs	r2, #11
 800098e:	231d      	movs	r3, #29
 8000990:	0001      	movs	r1, r0
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	4652      	mov	r2, sl
 8000996:	3908      	subs	r1, #8
 8000998:	40da      	lsrs	r2, r3
 800099a:	408e      	lsls	r6, r1
 800099c:	4316      	orrs	r6, r2
 800099e:	4652      	mov	r2, sl
 80009a0:	408a      	lsls	r2, r1
 80009a2:	9b00      	ldr	r3, [sp, #0]
 80009a4:	4989      	ldr	r1, [pc, #548]	; (8000bcc <__aeabi_dmul+0x3a4>)
 80009a6:	1a18      	subs	r0, r3, r0
 80009a8:	0003      	movs	r3, r0
 80009aa:	468c      	mov	ip, r1
 80009ac:	4463      	add	r3, ip
 80009ae:	2000      	movs	r0, #0
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	e77a      	b.n	80008aa <__aeabi_dmul+0x82>
 80009b4:	2400      	movs	r4, #0
 80009b6:	2500      	movs	r5, #0
 80009b8:	4a81      	ldr	r2, [pc, #516]	; (8000bc0 <__aeabi_dmul+0x398>)
 80009ba:	e7a5      	b.n	8000908 <__aeabi_dmul+0xe0>
 80009bc:	0c2f      	lsrs	r7, r5, #16
 80009be:	042d      	lsls	r5, r5, #16
 80009c0:	0c2d      	lsrs	r5, r5, #16
 80009c2:	002b      	movs	r3, r5
 80009c4:	0c11      	lsrs	r1, r2, #16
 80009c6:	0412      	lsls	r2, r2, #16
 80009c8:	0c12      	lsrs	r2, r2, #16
 80009ca:	4353      	muls	r3, r2
 80009cc:	4698      	mov	r8, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	0028      	movs	r0, r5
 80009d2:	437b      	muls	r3, r7
 80009d4:	4699      	mov	r9, r3
 80009d6:	4348      	muls	r0, r1
 80009d8:	4448      	add	r0, r9
 80009da:	4683      	mov	fp, r0
 80009dc:	4640      	mov	r0, r8
 80009de:	000b      	movs	r3, r1
 80009e0:	0c00      	lsrs	r0, r0, #16
 80009e2:	4682      	mov	sl, r0
 80009e4:	4658      	mov	r0, fp
 80009e6:	437b      	muls	r3, r7
 80009e8:	4450      	add	r0, sl
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	4581      	cmp	r9, r0
 80009ee:	d906      	bls.n	80009fe <__aeabi_dmul+0x1d6>
 80009f0:	469a      	mov	sl, r3
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	4699      	mov	r9, r3
 80009f8:	44ca      	add	sl, r9
 80009fa:	4653      	mov	r3, sl
 80009fc:	9302      	str	r3, [sp, #8]
 80009fe:	0c03      	lsrs	r3, r0, #16
 8000a00:	469b      	mov	fp, r3
 8000a02:	4643      	mov	r3, r8
 8000a04:	041b      	lsls	r3, r3, #16
 8000a06:	0400      	lsls	r0, r0, #16
 8000a08:	0c1b      	lsrs	r3, r3, #16
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	4443      	add	r3, r8
 8000a10:	9304      	str	r3, [sp, #16]
 8000a12:	0c33      	lsrs	r3, r6, #16
 8000a14:	4699      	mov	r9, r3
 8000a16:	002b      	movs	r3, r5
 8000a18:	0436      	lsls	r6, r6, #16
 8000a1a:	0c36      	lsrs	r6, r6, #16
 8000a1c:	4373      	muls	r3, r6
 8000a1e:	4698      	mov	r8, r3
 8000a20:	0033      	movs	r3, r6
 8000a22:	437b      	muls	r3, r7
 8000a24:	469a      	mov	sl, r3
 8000a26:	464b      	mov	r3, r9
 8000a28:	435d      	muls	r5, r3
 8000a2a:	435f      	muls	r7, r3
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	4455      	add	r5, sl
 8000a30:	0c18      	lsrs	r0, r3, #16
 8000a32:	1940      	adds	r0, r0, r5
 8000a34:	4582      	cmp	sl, r0
 8000a36:	d903      	bls.n	8000a40 <__aeabi_dmul+0x218>
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	025b      	lsls	r3, r3, #9
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	4457      	add	r7, sl
 8000a40:	0c05      	lsrs	r5, r0, #16
 8000a42:	19eb      	adds	r3, r5, r7
 8000a44:	9305      	str	r3, [sp, #20]
 8000a46:	4643      	mov	r3, r8
 8000a48:	041d      	lsls	r5, r3, #16
 8000a4a:	0c2d      	lsrs	r5, r5, #16
 8000a4c:	0400      	lsls	r0, r0, #16
 8000a4e:	1940      	adds	r0, r0, r5
 8000a50:	0c25      	lsrs	r5, r4, #16
 8000a52:	0424      	lsls	r4, r4, #16
 8000a54:	0c24      	lsrs	r4, r4, #16
 8000a56:	0027      	movs	r7, r4
 8000a58:	4357      	muls	r7, r2
 8000a5a:	436a      	muls	r2, r5
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	002a      	movs	r2, r5
 8000a60:	0c3b      	lsrs	r3, r7, #16
 8000a62:	469a      	mov	sl, r3
 8000a64:	434a      	muls	r2, r1
 8000a66:	4361      	muls	r1, r4
 8000a68:	4441      	add	r1, r8
 8000a6a:	4451      	add	r1, sl
 8000a6c:	4483      	add	fp, r0
 8000a6e:	4588      	cmp	r8, r1
 8000a70:	d903      	bls.n	8000a7a <__aeabi_dmul+0x252>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	4698      	mov	r8, r3
 8000a78:	4442      	add	r2, r8
 8000a7a:	043f      	lsls	r7, r7, #16
 8000a7c:	0c0b      	lsrs	r3, r1, #16
 8000a7e:	0c3f      	lsrs	r7, r7, #16
 8000a80:	0409      	lsls	r1, r1, #16
 8000a82:	19c9      	adds	r1, r1, r7
 8000a84:	0027      	movs	r7, r4
 8000a86:	4698      	mov	r8, r3
 8000a88:	464b      	mov	r3, r9
 8000a8a:	4377      	muls	r7, r6
 8000a8c:	435c      	muls	r4, r3
 8000a8e:	436e      	muls	r6, r5
 8000a90:	435d      	muls	r5, r3
 8000a92:	0c3b      	lsrs	r3, r7, #16
 8000a94:	4699      	mov	r9, r3
 8000a96:	19a4      	adds	r4, r4, r6
 8000a98:	444c      	add	r4, r9
 8000a9a:	4442      	add	r2, r8
 8000a9c:	9503      	str	r5, [sp, #12]
 8000a9e:	42a6      	cmp	r6, r4
 8000aa0:	d904      	bls.n	8000aac <__aeabi_dmul+0x284>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	4698      	mov	r8, r3
 8000aa8:	4445      	add	r5, r8
 8000aaa:	9503      	str	r5, [sp, #12]
 8000aac:	9b02      	ldr	r3, [sp, #8]
 8000aae:	043f      	lsls	r7, r7, #16
 8000ab0:	445b      	add	r3, fp
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	4283      	cmp	r3, r0
 8000ab6:	4180      	sbcs	r0, r0
 8000ab8:	0423      	lsls	r3, r4, #16
 8000aba:	4698      	mov	r8, r3
 8000abc:	9b05      	ldr	r3, [sp, #20]
 8000abe:	0c3f      	lsrs	r7, r7, #16
 8000ac0:	4447      	add	r7, r8
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	1876      	adds	r6, r6, r1
 8000ac6:	428e      	cmp	r6, r1
 8000ac8:	4189      	sbcs	r1, r1
 8000aca:	4447      	add	r7, r8
 8000acc:	4240      	negs	r0, r0
 8000ace:	183d      	adds	r5, r7, r0
 8000ad0:	46a8      	mov	r8, r5
 8000ad2:	4693      	mov	fp, r2
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	468a      	mov	sl, r1
 8000ad8:	44c3      	add	fp, r8
 8000ada:	429f      	cmp	r7, r3
 8000adc:	41bf      	sbcs	r7, r7
 8000ade:	4580      	cmp	r8, r0
 8000ae0:	4180      	sbcs	r0, r0
 8000ae2:	9b03      	ldr	r3, [sp, #12]
 8000ae4:	44da      	add	sl, fp
 8000ae6:	4698      	mov	r8, r3
 8000ae8:	4653      	mov	r3, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	427f      	negs	r7, r7
 8000aee:	4307      	orrs	r7, r0
 8000af0:	0c24      	lsrs	r4, r4, #16
 8000af2:	4593      	cmp	fp, r2
 8000af4:	4192      	sbcs	r2, r2
 8000af6:	458a      	cmp	sl, r1
 8000af8:	4189      	sbcs	r1, r1
 8000afa:	193f      	adds	r7, r7, r4
 8000afc:	0ddc      	lsrs	r4, r3, #23
 8000afe:	9b04      	ldr	r3, [sp, #16]
 8000b00:	0275      	lsls	r5, r6, #9
 8000b02:	431d      	orrs	r5, r3
 8000b04:	1e68      	subs	r0, r5, #1
 8000b06:	4185      	sbcs	r5, r0
 8000b08:	4653      	mov	r3, sl
 8000b0a:	4252      	negs	r2, r2
 8000b0c:	4249      	negs	r1, r1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	18bf      	adds	r7, r7, r2
 8000b12:	4447      	add	r7, r8
 8000b14:	0df6      	lsrs	r6, r6, #23
 8000b16:	027f      	lsls	r7, r7, #9
 8000b18:	4335      	orrs	r5, r6
 8000b1a:	025a      	lsls	r2, r3, #9
 8000b1c:	433c      	orrs	r4, r7
 8000b1e:	4315      	orrs	r5, r2
 8000b20:	01fb      	lsls	r3, r7, #7
 8000b22:	d400      	bmi.n	8000b26 <__aeabi_dmul+0x2fe>
 8000b24:	e0c1      	b.n	8000caa <__aeabi_dmul+0x482>
 8000b26:	2101      	movs	r1, #1
 8000b28:	086a      	lsrs	r2, r5, #1
 8000b2a:	400d      	ands	r5, r1
 8000b2c:	4315      	orrs	r5, r2
 8000b2e:	07e2      	lsls	r2, r4, #31
 8000b30:	4315      	orrs	r5, r2
 8000b32:	0864      	lsrs	r4, r4, #1
 8000b34:	4926      	ldr	r1, [pc, #152]	; (8000bd0 <__aeabi_dmul+0x3a8>)
 8000b36:	4461      	add	r1, ip
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	dd56      	ble.n	8000bea <__aeabi_dmul+0x3c2>
 8000b3c:	076b      	lsls	r3, r5, #29
 8000b3e:	d009      	beq.n	8000b54 <__aeabi_dmul+0x32c>
 8000b40:	220f      	movs	r2, #15
 8000b42:	402a      	ands	r2, r5
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dmul+0x32c>
 8000b48:	1d2a      	adds	r2, r5, #4
 8000b4a:	42aa      	cmp	r2, r5
 8000b4c:	41ad      	sbcs	r5, r5
 8000b4e:	426d      	negs	r5, r5
 8000b50:	1964      	adds	r4, r4, r5
 8000b52:	0015      	movs	r5, r2
 8000b54:	01e3      	lsls	r3, r4, #7
 8000b56:	d504      	bpl.n	8000b62 <__aeabi_dmul+0x33a>
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <__aeabi_dmul+0x3ac>)
 8000b5c:	00c9      	lsls	r1, r1, #3
 8000b5e:	4014      	ands	r4, r2
 8000b60:	4461      	add	r1, ip
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <__aeabi_dmul+0x3b0>)
 8000b64:	4291      	cmp	r1, r2
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dmul+0x342>
 8000b68:	e724      	b.n	80009b4 <__aeabi_dmul+0x18c>
 8000b6a:	0762      	lsls	r2, r4, #29
 8000b6c:	08ed      	lsrs	r5, r5, #3
 8000b6e:	0264      	lsls	r4, r4, #9
 8000b70:	0549      	lsls	r1, r1, #21
 8000b72:	4315      	orrs	r5, r2
 8000b74:	0b24      	lsrs	r4, r4, #12
 8000b76:	0d4a      	lsrs	r2, r1, #21
 8000b78:	e6c6      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000b7a:	9701      	str	r7, [sp, #4]
 8000b7c:	e6b8      	b.n	80008f0 <__aeabi_dmul+0xc8>
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <__aeabi_dmul+0x398>)
 8000b80:	2003      	movs	r0, #3
 8000b82:	4694      	mov	ip, r2
 8000b84:	4463      	add	r3, ip
 8000b86:	464a      	mov	r2, r9
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	4691      	mov	r9, r2
 8000b90:	4652      	mov	r2, sl
 8000b92:	e68a      	b.n	80008aa <__aeabi_dmul+0x82>
 8000b94:	4649      	mov	r1, r9
 8000b96:	2301      	movs	r3, #1
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	4689      	mov	r9, r1
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	e683      	b.n	80008aa <__aeabi_dmul+0x82>
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	0005      	movs	r5, r0
 8000baa:	4691      	mov	r9, r2
 8000bac:	469b      	mov	fp, r3
 8000bae:	e65e      	b.n	800086e <__aeabi_dmul+0x46>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	2400      	movs	r4, #0
 8000bbc:	469b      	mov	fp, r3
 8000bbe:	e656      	b.n	800086e <__aeabi_dmul+0x46>
 8000bc0:	000007ff 	.word	0x000007ff
 8000bc4:	fffffc01 	.word	0xfffffc01
 8000bc8:	0800424c 	.word	0x0800424c
 8000bcc:	fffffc0d 	.word	0xfffffc0d
 8000bd0:	000003ff 	.word	0x000003ff
 8000bd4:	feffffff 	.word	0xfeffffff
 8000bd8:	000007fe 	.word	0x000007fe
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2480      	movs	r4, #128	; 0x80
 8000be0:	2500      	movs	r5, #0
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <__aeabi_dmul+0x4cc>)
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	0324      	lsls	r4, r4, #12
 8000be8:	e68e      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000bea:	2001      	movs	r0, #1
 8000bec:	1a40      	subs	r0, r0, r1
 8000bee:	2838      	cmp	r0, #56	; 0x38
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dmul+0x3cc>
 8000bf2:	e686      	b.n	8000902 <__aeabi_dmul+0xda>
 8000bf4:	281f      	cmp	r0, #31
 8000bf6:	dd5b      	ble.n	8000cb0 <__aeabi_dmul+0x488>
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	0023      	movs	r3, r4
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	1a51      	subs	r1, r2, r1
 8000c00:	40cb      	lsrs	r3, r1
 8000c02:	0019      	movs	r1, r3
 8000c04:	2820      	cmp	r0, #32
 8000c06:	d003      	beq.n	8000c10 <__aeabi_dmul+0x3e8>
 8000c08:	4a3b      	ldr	r2, [pc, #236]	; (8000cf8 <__aeabi_dmul+0x4d0>)
 8000c0a:	4462      	add	r2, ip
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	4325      	orrs	r5, r4
 8000c10:	1e6a      	subs	r2, r5, #1
 8000c12:	4195      	sbcs	r5, r2
 8000c14:	002a      	movs	r2, r5
 8000c16:	430a      	orrs	r2, r1
 8000c18:	2107      	movs	r1, #7
 8000c1a:	000d      	movs	r5, r1
 8000c1c:	2400      	movs	r4, #0
 8000c1e:	4015      	ands	r5, r2
 8000c20:	4211      	tst	r1, r2
 8000c22:	d05b      	beq.n	8000cdc <__aeabi_dmul+0x4b4>
 8000c24:	210f      	movs	r1, #15
 8000c26:	2400      	movs	r4, #0
 8000c28:	4011      	ands	r1, r2
 8000c2a:	2904      	cmp	r1, #4
 8000c2c:	d053      	beq.n	8000cd6 <__aeabi_dmul+0x4ae>
 8000c2e:	1d11      	adds	r1, r2, #4
 8000c30:	4291      	cmp	r1, r2
 8000c32:	4192      	sbcs	r2, r2
 8000c34:	4252      	negs	r2, r2
 8000c36:	18a4      	adds	r4, r4, r2
 8000c38:	000a      	movs	r2, r1
 8000c3a:	0223      	lsls	r3, r4, #8
 8000c3c:	d54b      	bpl.n	8000cd6 <__aeabi_dmul+0x4ae>
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2400      	movs	r4, #0
 8000c42:	2500      	movs	r5, #0
 8000c44:	e660      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	031b      	lsls	r3, r3, #12
 8000c4a:	421c      	tst	r4, r3
 8000c4c:	d009      	beq.n	8000c62 <__aeabi_dmul+0x43a>
 8000c4e:	421e      	tst	r6, r3
 8000c50:	d107      	bne.n	8000c62 <__aeabi_dmul+0x43a>
 8000c52:	4333      	orrs	r3, r6
 8000c54:	031c      	lsls	r4, r3, #12
 8000c56:	4643      	mov	r3, r8
 8000c58:	0015      	movs	r5, r2
 8000c5a:	0b24      	lsrs	r4, r4, #12
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <__aeabi_dmul+0x4cc>)
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	e652      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0312      	lsls	r2, r2, #12
 8000c66:	4314      	orrs	r4, r2
 8000c68:	0324      	lsls	r4, r4, #12
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <__aeabi_dmul+0x4cc>)
 8000c6c:	0b24      	lsrs	r4, r4, #12
 8000c6e:	9701      	str	r7, [sp, #4]
 8000c70:	e64a      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000c72:	f000 fd4b 	bl	800170c <__clzsi2>
 8000c76:	0003      	movs	r3, r0
 8000c78:	001a      	movs	r2, r3
 8000c7a:	3215      	adds	r2, #21
 8000c7c:	3020      	adds	r0, #32
 8000c7e:	2a1c      	cmp	r2, #28
 8000c80:	dc00      	bgt.n	8000c84 <__aeabi_dmul+0x45c>
 8000c82:	e684      	b.n	800098e <__aeabi_dmul+0x166>
 8000c84:	4656      	mov	r6, sl
 8000c86:	3b08      	subs	r3, #8
 8000c88:	2200      	movs	r2, #0
 8000c8a:	409e      	lsls	r6, r3
 8000c8c:	e689      	b.n	80009a2 <__aeabi_dmul+0x17a>
 8000c8e:	f000 fd3d 	bl	800170c <__clzsi2>
 8000c92:	0001      	movs	r1, r0
 8000c94:	0002      	movs	r2, r0
 8000c96:	3115      	adds	r1, #21
 8000c98:	3220      	adds	r2, #32
 8000c9a:	291c      	cmp	r1, #28
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_dmul+0x478>
 8000c9e:	e64e      	b.n	800093e <__aeabi_dmul+0x116>
 8000ca0:	0034      	movs	r4, r6
 8000ca2:	3808      	subs	r0, #8
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	4084      	lsls	r4, r0
 8000ca8:	e653      	b.n	8000952 <__aeabi_dmul+0x12a>
 8000caa:	9b00      	ldr	r3, [sp, #0]
 8000cac:	469c      	mov	ip, r3
 8000cae:	e741      	b.n	8000b34 <__aeabi_dmul+0x30c>
 8000cb0:	4912      	ldr	r1, [pc, #72]	; (8000cfc <__aeabi_dmul+0x4d4>)
 8000cb2:	0022      	movs	r2, r4
 8000cb4:	4461      	add	r1, ip
 8000cb6:	002e      	movs	r6, r5
 8000cb8:	408d      	lsls	r5, r1
 8000cba:	408a      	lsls	r2, r1
 8000cbc:	40c6      	lsrs	r6, r0
 8000cbe:	1e69      	subs	r1, r5, #1
 8000cc0:	418d      	sbcs	r5, r1
 8000cc2:	4332      	orrs	r2, r6
 8000cc4:	432a      	orrs	r2, r5
 8000cc6:	40c4      	lsrs	r4, r0
 8000cc8:	0753      	lsls	r3, r2, #29
 8000cca:	d0b6      	beq.n	8000c3a <__aeabi_dmul+0x412>
 8000ccc:	210f      	movs	r1, #15
 8000cce:	4011      	ands	r1, r2
 8000cd0:	2904      	cmp	r1, #4
 8000cd2:	d1ac      	bne.n	8000c2e <__aeabi_dmul+0x406>
 8000cd4:	e7b1      	b.n	8000c3a <__aeabi_dmul+0x412>
 8000cd6:	0765      	lsls	r5, r4, #29
 8000cd8:	0264      	lsls	r4, r4, #9
 8000cda:	0b24      	lsrs	r4, r4, #12
 8000cdc:	08d2      	lsrs	r2, r2, #3
 8000cde:	4315      	orrs	r5, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e611      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0312      	lsls	r2, r2, #12
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	0324      	lsls	r4, r4, #12
 8000cec:	4a01      	ldr	r2, [pc, #4]	; (8000cf4 <__aeabi_dmul+0x4cc>)
 8000cee:	0b24      	lsrs	r4, r4, #12
 8000cf0:	e60a      	b.n	8000908 <__aeabi_dmul+0xe0>
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	000007ff 	.word	0x000007ff
 8000cf8:	0000043e 	.word	0x0000043e
 8000cfc:	0000041e 	.word	0x0000041e

08000d00 <__aeabi_dsub>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	4657      	mov	r7, sl
 8000d04:	464e      	mov	r6, r9
 8000d06:	4645      	mov	r5, r8
 8000d08:	46de      	mov	lr, fp
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	b5e0      	push	{r5, r6, r7, lr}
 8000d0e:	001f      	movs	r7, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	030b      	lsls	r3, r1, #12
 8000d14:	0f62      	lsrs	r2, r4, #29
 8000d16:	004e      	lsls	r6, r1, #1
 8000d18:	0fcd      	lsrs	r5, r1, #31
 8000d1a:	0a5b      	lsrs	r3, r3, #9
 8000d1c:	0339      	lsls	r1, r7, #12
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	0a49      	lsrs	r1, r1, #9
 8000d22:	00e2      	lsls	r2, r4, #3
 8000d24:	0f44      	lsrs	r4, r0, #29
 8000d26:	4321      	orrs	r1, r4
 8000d28:	4cc2      	ldr	r4, [pc, #776]	; (8001034 <__aeabi_dsub+0x334>)
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	4692      	mov	sl, r2
 8000d2e:	00c0      	lsls	r0, r0, #3
 8000d30:	007a      	lsls	r2, r7, #1
 8000d32:	4680      	mov	r8, r0
 8000d34:	0d76      	lsrs	r6, r6, #21
 8000d36:	0d52      	lsrs	r2, r2, #21
 8000d38:	0fff      	lsrs	r7, r7, #31
 8000d3a:	42a2      	cmp	r2, r4
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dsub+0x40>
 8000d3e:	e0b4      	b.n	8000eaa <__aeabi_dsub+0x1aa>
 8000d40:	2401      	movs	r4, #1
 8000d42:	4067      	eors	r7, r4
 8000d44:	46bb      	mov	fp, r7
 8000d46:	42bd      	cmp	r5, r7
 8000d48:	d100      	bne.n	8000d4c <__aeabi_dsub+0x4c>
 8000d4a:	e088      	b.n	8000e5e <__aeabi_dsub+0x15e>
 8000d4c:	1ab4      	subs	r4, r6, r2
 8000d4e:	46a4      	mov	ip, r4
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	dc00      	bgt.n	8000d56 <__aeabi_dsub+0x56>
 8000d54:	e0b2      	b.n	8000ebc <__aeabi_dsub+0x1bc>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dsub+0x5c>
 8000d5a:	e0c5      	b.n	8000ee8 <__aeabi_dsub+0x1e8>
 8000d5c:	4ab5      	ldr	r2, [pc, #724]	; (8001034 <__aeabi_dsub+0x334>)
 8000d5e:	4296      	cmp	r6, r2
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dsub+0x64>
 8000d62:	e28b      	b.n	800127c <__aeabi_dsub+0x57c>
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0412      	lsls	r2, r2, #16
 8000d68:	4311      	orrs	r1, r2
 8000d6a:	4662      	mov	r2, ip
 8000d6c:	2a38      	cmp	r2, #56	; 0x38
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_dsub+0x72>
 8000d70:	e1a1      	b.n	80010b6 <__aeabi_dsub+0x3b6>
 8000d72:	2a1f      	cmp	r2, #31
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dsub+0x78>
 8000d76:	e216      	b.n	80011a6 <__aeabi_dsub+0x4a6>
 8000d78:	2720      	movs	r7, #32
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	1abf      	subs	r7, r7, r2
 8000d7e:	40bc      	lsls	r4, r7
 8000d80:	0002      	movs	r2, r0
 8000d82:	46a0      	mov	r8, r4
 8000d84:	4664      	mov	r4, ip
 8000d86:	40b8      	lsls	r0, r7
 8000d88:	40e2      	lsrs	r2, r4
 8000d8a:	4644      	mov	r4, r8
 8000d8c:	4314      	orrs	r4, r2
 8000d8e:	0002      	movs	r2, r0
 8000d90:	1e50      	subs	r0, r2, #1
 8000d92:	4182      	sbcs	r2, r0
 8000d94:	4660      	mov	r0, ip
 8000d96:	40c1      	lsrs	r1, r0
 8000d98:	4322      	orrs	r2, r4
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	1a8c      	subs	r4, r1, r2
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	4192      	sbcs	r2, r2
 8000da4:	4252      	negs	r2, r2
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	4698      	mov	r8, r3
 8000daa:	4643      	mov	r3, r8
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	d400      	bmi.n	8000db2 <__aeabi_dsub+0xb2>
 8000db0:	e117      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 8000db2:	4643      	mov	r3, r8
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	4698      	mov	r8, r3
 8000dba:	4643      	mov	r3, r8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_dsub+0xc2>
 8000dc0:	e16c      	b.n	800109c <__aeabi_dsub+0x39c>
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	f000 fca2 	bl	800170c <__clzsi2>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	2120      	movs	r1, #32
 8000dce:	0020      	movs	r0, r4
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	1a89      	subs	r1, r1, r2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	40c8      	lsrs	r0, r1
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	4296      	cmp	r6, r2
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dsub+0xe2>
 8000de0:	e157      	b.n	8001092 <__aeabi_dsub+0x392>
 8000de2:	1b96      	subs	r6, r2, r6
 8000de4:	1c71      	adds	r1, r6, #1
 8000de6:	291f      	cmp	r1, #31
 8000de8:	dd00      	ble.n	8000dec <__aeabi_dsub+0xec>
 8000dea:	e1cb      	b.n	8001184 <__aeabi_dsub+0x484>
 8000dec:	2220      	movs	r2, #32
 8000dee:	0018      	movs	r0, r3
 8000df0:	0026      	movs	r6, r4
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	4094      	lsls	r4, r2
 8000df6:	4090      	lsls	r0, r2
 8000df8:	40ce      	lsrs	r6, r1
 8000dfa:	40cb      	lsrs	r3, r1
 8000dfc:	1e62      	subs	r2, r4, #1
 8000dfe:	4194      	sbcs	r4, r2
 8000e00:	4330      	orrs	r0, r6
 8000e02:	4698      	mov	r8, r3
 8000e04:	2600      	movs	r6, #0
 8000e06:	4304      	orrs	r4, r0
 8000e08:	0763      	lsls	r3, r4, #29
 8000e0a:	d009      	beq.n	8000e20 <__aeabi_dsub+0x120>
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	4023      	ands	r3, r4
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d005      	beq.n	8000e20 <__aeabi_dsub+0x120>
 8000e14:	1d23      	adds	r3, r4, #4
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	41a4      	sbcs	r4, r4
 8000e1a:	4264      	negs	r4, r4
 8000e1c:	44a0      	add	r8, r4
 8000e1e:	001c      	movs	r4, r3
 8000e20:	4643      	mov	r3, r8
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	d400      	bmi.n	8000e28 <__aeabi_dsub+0x128>
 8000e26:	e0df      	b.n	8000fe8 <__aeabi_dsub+0x2e8>
 8000e28:	4b82      	ldr	r3, [pc, #520]	; (8001034 <__aeabi_dsub+0x334>)
 8000e2a:	3601      	adds	r6, #1
 8000e2c:	429e      	cmp	r6, r3
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dsub+0x132>
 8000e30:	e0fb      	b.n	800102a <__aeabi_dsub+0x32a>
 8000e32:	4642      	mov	r2, r8
 8000e34:	4b80      	ldr	r3, [pc, #512]	; (8001038 <__aeabi_dsub+0x338>)
 8000e36:	08e4      	lsrs	r4, r4, #3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	0571      	lsls	r1, r6, #21
 8000e3e:	0752      	lsls	r2, r2, #29
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4322      	orrs	r2, r4
 8000e44:	0b1b      	lsrs	r3, r3, #12
 8000e46:	0d49      	lsrs	r1, r1, #21
 8000e48:	0509      	lsls	r1, r1, #20
 8000e4a:	07ed      	lsls	r5, r5, #31
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	4329      	orrs	r1, r5
 8000e50:	0010      	movs	r0, r2
 8000e52:	bcf0      	pop	{r4, r5, r6, r7}
 8000e54:	46bb      	mov	fp, r7
 8000e56:	46b2      	mov	sl, r6
 8000e58:	46a9      	mov	r9, r5
 8000e5a:	46a0      	mov	r8, r4
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5e:	1ab4      	subs	r4, r6, r2
 8000e60:	46a4      	mov	ip, r4
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	dd58      	ble.n	8000f18 <__aeabi_dsub+0x218>
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dsub+0x16c>
 8000e6a:	e09e      	b.n	8000faa <__aeabi_dsub+0x2aa>
 8000e6c:	4a71      	ldr	r2, [pc, #452]	; (8001034 <__aeabi_dsub+0x334>)
 8000e6e:	4296      	cmp	r6, r2
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dsub+0x174>
 8000e72:	e13b      	b.n	80010ec <__aeabi_dsub+0x3ec>
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0412      	lsls	r2, r2, #16
 8000e78:	4311      	orrs	r1, r2
 8000e7a:	4662      	mov	r2, ip
 8000e7c:	2a38      	cmp	r2, #56	; 0x38
 8000e7e:	dd00      	ble.n	8000e82 <__aeabi_dsub+0x182>
 8000e80:	e0c1      	b.n	8001006 <__aeabi_dsub+0x306>
 8000e82:	2a1f      	cmp	r2, #31
 8000e84:	dc00      	bgt.n	8000e88 <__aeabi_dsub+0x188>
 8000e86:	e1bb      	b.n	8001200 <__aeabi_dsub+0x500>
 8000e88:	000c      	movs	r4, r1
 8000e8a:	3a20      	subs	r2, #32
 8000e8c:	40d4      	lsrs	r4, r2
 8000e8e:	0022      	movs	r2, r4
 8000e90:	4664      	mov	r4, ip
 8000e92:	2c20      	cmp	r4, #32
 8000e94:	d004      	beq.n	8000ea0 <__aeabi_dsub+0x1a0>
 8000e96:	2740      	movs	r7, #64	; 0x40
 8000e98:	1b3f      	subs	r7, r7, r4
 8000e9a:	40b9      	lsls	r1, r7
 8000e9c:	4308      	orrs	r0, r1
 8000e9e:	4680      	mov	r8, r0
 8000ea0:	4644      	mov	r4, r8
 8000ea2:	1e61      	subs	r1, r4, #1
 8000ea4:	418c      	sbcs	r4, r1
 8000ea6:	4314      	orrs	r4, r2
 8000ea8:	e0b1      	b.n	800100e <__aeabi_dsub+0x30e>
 8000eaa:	000c      	movs	r4, r1
 8000eac:	4304      	orrs	r4, r0
 8000eae:	d02a      	beq.n	8000f06 <__aeabi_dsub+0x206>
 8000eb0:	46bb      	mov	fp, r7
 8000eb2:	42bd      	cmp	r5, r7
 8000eb4:	d02d      	beq.n	8000f12 <__aeabi_dsub+0x212>
 8000eb6:	4c61      	ldr	r4, [pc, #388]	; (800103c <__aeabi_dsub+0x33c>)
 8000eb8:	46a4      	mov	ip, r4
 8000eba:	44b4      	add	ip, r6
 8000ebc:	4664      	mov	r4, ip
 8000ebe:	2c00      	cmp	r4, #0
 8000ec0:	d05c      	beq.n	8000f7c <__aeabi_dsub+0x27c>
 8000ec2:	1b94      	subs	r4, r2, r6
 8000ec4:	46a4      	mov	ip, r4
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_dsub+0x1cc>
 8000eca:	e115      	b.n	80010f8 <__aeabi_dsub+0x3f8>
 8000ecc:	464d      	mov	r5, r9
 8000ece:	431d      	orrs	r5, r3
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dsub+0x1d4>
 8000ed2:	e1c3      	b.n	800125c <__aeabi_dsub+0x55c>
 8000ed4:	1e65      	subs	r5, r4, #1
 8000ed6:	2c01      	cmp	r4, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dsub+0x1dc>
 8000eda:	e20c      	b.n	80012f6 <__aeabi_dsub+0x5f6>
 8000edc:	4e55      	ldr	r6, [pc, #340]	; (8001034 <__aeabi_dsub+0x334>)
 8000ede:	42b4      	cmp	r4, r6
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dsub+0x1e4>
 8000ee2:	e1f8      	b.n	80012d6 <__aeabi_dsub+0x5d6>
 8000ee4:	46ac      	mov	ip, r5
 8000ee6:	e10e      	b.n	8001106 <__aeabi_dsub+0x406>
 8000ee8:	000a      	movs	r2, r1
 8000eea:	4302      	orrs	r2, r0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dsub+0x1f0>
 8000eee:	e136      	b.n	800115e <__aeabi_dsub+0x45e>
 8000ef0:	0022      	movs	r2, r4
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	2c01      	cmp	r4, #1
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x1fa>
 8000ef8:	e1c6      	b.n	8001288 <__aeabi_dsub+0x588>
 8000efa:	4c4e      	ldr	r4, [pc, #312]	; (8001034 <__aeabi_dsub+0x334>)
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dsub+0x202>
 8000f00:	e0f4      	b.n	80010ec <__aeabi_dsub+0x3ec>
 8000f02:	4694      	mov	ip, r2
 8000f04:	e731      	b.n	8000d6a <__aeabi_dsub+0x6a>
 8000f06:	2401      	movs	r4, #1
 8000f08:	4067      	eors	r7, r4
 8000f0a:	46bb      	mov	fp, r7
 8000f0c:	42bd      	cmp	r5, r7
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dsub+0x212>
 8000f10:	e71c      	b.n	8000d4c <__aeabi_dsub+0x4c>
 8000f12:	4c4a      	ldr	r4, [pc, #296]	; (800103c <__aeabi_dsub+0x33c>)
 8000f14:	46a4      	mov	ip, r4
 8000f16:	44b4      	add	ip, r6
 8000f18:	4664      	mov	r4, ip
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dsub+0x220>
 8000f1e:	e0cf      	b.n	80010c0 <__aeabi_dsub+0x3c0>
 8000f20:	1b94      	subs	r4, r2, r6
 8000f22:	46a4      	mov	ip, r4
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dsub+0x22a>
 8000f28:	e15c      	b.n	80011e4 <__aeabi_dsub+0x4e4>
 8000f2a:	4e42      	ldr	r6, [pc, #264]	; (8001034 <__aeabi_dsub+0x334>)
 8000f2c:	42b2      	cmp	r2, r6
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dsub+0x232>
 8000f30:	e1ec      	b.n	800130c <__aeabi_dsub+0x60c>
 8000f32:	2680      	movs	r6, #128	; 0x80
 8000f34:	0436      	lsls	r6, r6, #16
 8000f36:	4333      	orrs	r3, r6
 8000f38:	4664      	mov	r4, ip
 8000f3a:	2c38      	cmp	r4, #56	; 0x38
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dsub+0x240>
 8000f3e:	e1b3      	b.n	80012a8 <__aeabi_dsub+0x5a8>
 8000f40:	2c1f      	cmp	r4, #31
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dsub+0x246>
 8000f44:	e238      	b.n	80013b8 <__aeabi_dsub+0x6b8>
 8000f46:	2620      	movs	r6, #32
 8000f48:	1b36      	subs	r6, r6, r4
 8000f4a:	001c      	movs	r4, r3
 8000f4c:	40b4      	lsls	r4, r6
 8000f4e:	464f      	mov	r7, r9
 8000f50:	46a0      	mov	r8, r4
 8000f52:	4664      	mov	r4, ip
 8000f54:	40e7      	lsrs	r7, r4
 8000f56:	4644      	mov	r4, r8
 8000f58:	433c      	orrs	r4, r7
 8000f5a:	464f      	mov	r7, r9
 8000f5c:	40b7      	lsls	r7, r6
 8000f5e:	003e      	movs	r6, r7
 8000f60:	1e77      	subs	r7, r6, #1
 8000f62:	41be      	sbcs	r6, r7
 8000f64:	4334      	orrs	r4, r6
 8000f66:	4666      	mov	r6, ip
 8000f68:	40f3      	lsrs	r3, r6
 8000f6a:	18c9      	adds	r1, r1, r3
 8000f6c:	1824      	adds	r4, r4, r0
 8000f6e:	4284      	cmp	r4, r0
 8000f70:	419b      	sbcs	r3, r3
 8000f72:	425b      	negs	r3, r3
 8000f74:	4698      	mov	r8, r3
 8000f76:	0016      	movs	r6, r2
 8000f78:	4488      	add	r8, r1
 8000f7a:	e04e      	b.n	800101a <__aeabi_dsub+0x31a>
 8000f7c:	4a30      	ldr	r2, [pc, #192]	; (8001040 <__aeabi_dsub+0x340>)
 8000f7e:	1c74      	adds	r4, r6, #1
 8000f80:	4214      	tst	r4, r2
 8000f82:	d000      	beq.n	8000f86 <__aeabi_dsub+0x286>
 8000f84:	e0d6      	b.n	8001134 <__aeabi_dsub+0x434>
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_dsub+0x290>
 8000f8e:	e15b      	b.n	8001248 <__aeabi_dsub+0x548>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dsub+0x296>
 8000f94:	e1a5      	b.n	80012e2 <__aeabi_dsub+0x5e2>
 8000f96:	000a      	movs	r2, r1
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dsub+0x29e>
 8000f9c:	e1bb      	b.n	8001316 <__aeabi_dsub+0x616>
 8000f9e:	464a      	mov	r2, r9
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	08d2      	lsrs	r2, r2, #3
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	e027      	b.n	8000ffa <__aeabi_dsub+0x2fa>
 8000faa:	000a      	movs	r2, r1
 8000fac:	4302      	orrs	r2, r0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0x2b2>
 8000fb0:	e174      	b.n	800129c <__aeabi_dsub+0x59c>
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	2c01      	cmp	r4, #1
 8000fb8:	d005      	beq.n	8000fc6 <__aeabi_dsub+0x2c6>
 8000fba:	4c1e      	ldr	r4, [pc, #120]	; (8001034 <__aeabi_dsub+0x334>)
 8000fbc:	45a4      	cmp	ip, r4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dsub+0x2c2>
 8000fc0:	e094      	b.n	80010ec <__aeabi_dsub+0x3ec>
 8000fc2:	4694      	mov	ip, r2
 8000fc4:	e759      	b.n	8000e7a <__aeabi_dsub+0x17a>
 8000fc6:	4448      	add	r0, r9
 8000fc8:	4548      	cmp	r0, r9
 8000fca:	4192      	sbcs	r2, r2
 8000fcc:	185b      	adds	r3, r3, r1
 8000fce:	4698      	mov	r8, r3
 8000fd0:	0004      	movs	r4, r0
 8000fd2:	4252      	negs	r2, r2
 8000fd4:	4490      	add	r8, r2
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	2602      	movs	r6, #2
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	d500      	bpl.n	8000fe0 <__aeabi_dsub+0x2e0>
 8000fde:	e0c4      	b.n	800116a <__aeabi_dsub+0x46a>
 8000fe0:	3e01      	subs	r6, #1
 8000fe2:	0763      	lsls	r3, r4, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dsub+0x2e8>
 8000fe6:	e711      	b.n	8000e0c <__aeabi_dsub+0x10c>
 8000fe8:	4643      	mov	r3, r8
 8000fea:	46b4      	mov	ip, r6
 8000fec:	0759      	lsls	r1, r3, #29
 8000fee:	08e2      	lsrs	r2, r4, #3
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	490f      	ldr	r1, [pc, #60]	; (8001034 <__aeabi_dsub+0x334>)
 8000ff6:	458c      	cmp	ip, r1
 8000ff8:	d040      	beq.n	800107c <__aeabi_dsub+0x37c>
 8000ffa:	4661      	mov	r1, ip
 8000ffc:	031b      	lsls	r3, r3, #12
 8000ffe:	0549      	lsls	r1, r1, #21
 8001000:	0b1b      	lsrs	r3, r3, #12
 8001002:	0d49      	lsrs	r1, r1, #21
 8001004:	e720      	b.n	8000e48 <__aeabi_dsub+0x148>
 8001006:	4301      	orrs	r1, r0
 8001008:	000c      	movs	r4, r1
 800100a:	1e61      	subs	r1, r4, #1
 800100c:	418c      	sbcs	r4, r1
 800100e:	444c      	add	r4, r9
 8001010:	454c      	cmp	r4, r9
 8001012:	4192      	sbcs	r2, r2
 8001014:	4252      	negs	r2, r2
 8001016:	4690      	mov	r8, r2
 8001018:	4498      	add	r8, r3
 800101a:	4643      	mov	r3, r8
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	d5e0      	bpl.n	8000fe2 <__aeabi_dsub+0x2e2>
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__aeabi_dsub+0x334>)
 8001022:	3601      	adds	r6, #1
 8001024:	429e      	cmp	r6, r3
 8001026:	d000      	beq.n	800102a <__aeabi_dsub+0x32a>
 8001028:	e09f      	b.n	800116a <__aeabi_dsub+0x46a>
 800102a:	0031      	movs	r1, r6
 800102c:	2300      	movs	r3, #0
 800102e:	2200      	movs	r2, #0
 8001030:	e70a      	b.n	8000e48 <__aeabi_dsub+0x148>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	000007ff 	.word	0x000007ff
 8001038:	ff7fffff 	.word	0xff7fffff
 800103c:	fffff801 	.word	0xfffff801
 8001040:	000007fe 	.word	0x000007fe
 8001044:	2a00      	cmp	r2, #0
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x34a>
 8001048:	e160      	b.n	800130c <__aeabi_dsub+0x60c>
 800104a:	000a      	movs	r2, r1
 800104c:	4302      	orrs	r2, r0
 800104e:	d04d      	beq.n	80010ec <__aeabi_dsub+0x3ec>
 8001050:	464a      	mov	r2, r9
 8001052:	075c      	lsls	r4, r3, #29
 8001054:	08d2      	lsrs	r2, r2, #3
 8001056:	4322      	orrs	r2, r4
 8001058:	2480      	movs	r4, #128	; 0x80
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	0324      	lsls	r4, r4, #12
 800105e:	4223      	tst	r3, r4
 8001060:	d007      	beq.n	8001072 <__aeabi_dsub+0x372>
 8001062:	08ce      	lsrs	r6, r1, #3
 8001064:	4226      	tst	r6, r4
 8001066:	d104      	bne.n	8001072 <__aeabi_dsub+0x372>
 8001068:	465d      	mov	r5, fp
 800106a:	0033      	movs	r3, r6
 800106c:	08c2      	lsrs	r2, r0, #3
 800106e:	0749      	lsls	r1, r1, #29
 8001070:	430a      	orrs	r2, r1
 8001072:	0f51      	lsrs	r1, r2, #29
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	08d2      	lsrs	r2, r2, #3
 8001078:	0749      	lsls	r1, r1, #29
 800107a:	430a      	orrs	r2, r1
 800107c:	0011      	movs	r1, r2
 800107e:	4319      	orrs	r1, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_dsub+0x384>
 8001082:	e1c8      	b.n	8001416 <__aeabi_dsub+0x716>
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0309      	lsls	r1, r1, #12
 8001088:	430b      	orrs	r3, r1
 800108a:	031b      	lsls	r3, r3, #12
 800108c:	49d5      	ldr	r1, [pc, #852]	; (80013e4 <__aeabi_dsub+0x6e4>)
 800108e:	0b1b      	lsrs	r3, r3, #12
 8001090:	e6da      	b.n	8000e48 <__aeabi_dsub+0x148>
 8001092:	49d5      	ldr	r1, [pc, #852]	; (80013e8 <__aeabi_dsub+0x6e8>)
 8001094:	1ab6      	subs	r6, r6, r2
 8001096:	400b      	ands	r3, r1
 8001098:	4698      	mov	r8, r3
 800109a:	e6b5      	b.n	8000e08 <__aeabi_dsub+0x108>
 800109c:	0020      	movs	r0, r4
 800109e:	f000 fb35 	bl	800170c <__clzsi2>
 80010a2:	0002      	movs	r2, r0
 80010a4:	3218      	adds	r2, #24
 80010a6:	2a1f      	cmp	r2, #31
 80010a8:	dc00      	bgt.n	80010ac <__aeabi_dsub+0x3ac>
 80010aa:	e68f      	b.n	8000dcc <__aeabi_dsub+0xcc>
 80010ac:	0023      	movs	r3, r4
 80010ae:	3808      	subs	r0, #8
 80010b0:	4083      	lsls	r3, r0
 80010b2:	2400      	movs	r4, #0
 80010b4:	e692      	b.n	8000ddc <__aeabi_dsub+0xdc>
 80010b6:	4308      	orrs	r0, r1
 80010b8:	0002      	movs	r2, r0
 80010ba:	1e50      	subs	r0, r2, #1
 80010bc:	4182      	sbcs	r2, r0
 80010be:	e66d      	b.n	8000d9c <__aeabi_dsub+0x9c>
 80010c0:	4cca      	ldr	r4, [pc, #808]	; (80013ec <__aeabi_dsub+0x6ec>)
 80010c2:	1c72      	adds	r2, r6, #1
 80010c4:	4222      	tst	r2, r4
 80010c6:	d000      	beq.n	80010ca <__aeabi_dsub+0x3ca>
 80010c8:	e0ad      	b.n	8001226 <__aeabi_dsub+0x526>
 80010ca:	464a      	mov	r2, r9
 80010cc:	431a      	orrs	r2, r3
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d1b8      	bne.n	8001044 <__aeabi_dsub+0x344>
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dsub+0x3d8>
 80010d6:	e158      	b.n	800138a <__aeabi_dsub+0x68a>
 80010d8:	000a      	movs	r2, r1
 80010da:	4302      	orrs	r2, r0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dsub+0x3e0>
 80010de:	e159      	b.n	8001394 <__aeabi_dsub+0x694>
 80010e0:	464a      	mov	r2, r9
 80010e2:	0759      	lsls	r1, r3, #29
 80010e4:	08d2      	lsrs	r2, r2, #3
 80010e6:	430a      	orrs	r2, r1
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	e786      	b.n	8000ffa <__aeabi_dsub+0x2fa>
 80010ec:	464a      	mov	r2, r9
 80010ee:	0759      	lsls	r1, r3, #29
 80010f0:	08d2      	lsrs	r2, r2, #3
 80010f2:	430a      	orrs	r2, r1
 80010f4:	08db      	lsrs	r3, r3, #3
 80010f6:	e7c1      	b.n	800107c <__aeabi_dsub+0x37c>
 80010f8:	4dba      	ldr	r5, [pc, #744]	; (80013e4 <__aeabi_dsub+0x6e4>)
 80010fa:	42aa      	cmp	r2, r5
 80010fc:	d100      	bne.n	8001100 <__aeabi_dsub+0x400>
 80010fe:	e11e      	b.n	800133e <__aeabi_dsub+0x63e>
 8001100:	2580      	movs	r5, #128	; 0x80
 8001102:	042d      	lsls	r5, r5, #16
 8001104:	432b      	orrs	r3, r5
 8001106:	4664      	mov	r4, ip
 8001108:	2c38      	cmp	r4, #56	; 0x38
 800110a:	dc5d      	bgt.n	80011c8 <__aeabi_dsub+0x4c8>
 800110c:	2c1f      	cmp	r4, #31
 800110e:	dd00      	ble.n	8001112 <__aeabi_dsub+0x412>
 8001110:	e0d0      	b.n	80012b4 <__aeabi_dsub+0x5b4>
 8001112:	2520      	movs	r5, #32
 8001114:	4667      	mov	r7, ip
 8001116:	1b2d      	subs	r5, r5, r4
 8001118:	464e      	mov	r6, r9
 800111a:	001c      	movs	r4, r3
 800111c:	40fe      	lsrs	r6, r7
 800111e:	40ac      	lsls	r4, r5
 8001120:	4334      	orrs	r4, r6
 8001122:	464e      	mov	r6, r9
 8001124:	40ae      	lsls	r6, r5
 8001126:	0035      	movs	r5, r6
 8001128:	40fb      	lsrs	r3, r7
 800112a:	1e6e      	subs	r6, r5, #1
 800112c:	41b5      	sbcs	r5, r6
 800112e:	1ac9      	subs	r1, r1, r3
 8001130:	432c      	orrs	r4, r5
 8001132:	e04e      	b.n	80011d2 <__aeabi_dsub+0x4d2>
 8001134:	464a      	mov	r2, r9
 8001136:	1a14      	subs	r4, r2, r0
 8001138:	45a1      	cmp	r9, r4
 800113a:	4192      	sbcs	r2, r2
 800113c:	4252      	negs	r2, r2
 800113e:	4690      	mov	r8, r2
 8001140:	1a5f      	subs	r7, r3, r1
 8001142:	003a      	movs	r2, r7
 8001144:	4647      	mov	r7, r8
 8001146:	1bd2      	subs	r2, r2, r7
 8001148:	4690      	mov	r8, r2
 800114a:	0212      	lsls	r2, r2, #8
 800114c:	d500      	bpl.n	8001150 <__aeabi_dsub+0x450>
 800114e:	e08b      	b.n	8001268 <__aeabi_dsub+0x568>
 8001150:	4642      	mov	r2, r8
 8001152:	4322      	orrs	r2, r4
 8001154:	d000      	beq.n	8001158 <__aeabi_dsub+0x458>
 8001156:	e630      	b.n	8000dba <__aeabi_dsub+0xba>
 8001158:	2300      	movs	r3, #0
 800115a:	2500      	movs	r5, #0
 800115c:	e74d      	b.n	8000ffa <__aeabi_dsub+0x2fa>
 800115e:	464a      	mov	r2, r9
 8001160:	0759      	lsls	r1, r3, #29
 8001162:	08d2      	lsrs	r2, r2, #3
 8001164:	430a      	orrs	r2, r1
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	e744      	b.n	8000ff4 <__aeabi_dsub+0x2f4>
 800116a:	4642      	mov	r2, r8
 800116c:	4b9e      	ldr	r3, [pc, #632]	; (80013e8 <__aeabi_dsub+0x6e8>)
 800116e:	0861      	lsrs	r1, r4, #1
 8001170:	401a      	ands	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	2201      	movs	r2, #1
 8001176:	4014      	ands	r4, r2
 8001178:	430c      	orrs	r4, r1
 800117a:	07da      	lsls	r2, r3, #31
 800117c:	085b      	lsrs	r3, r3, #1
 800117e:	4698      	mov	r8, r3
 8001180:	4314      	orrs	r4, r2
 8001182:	e641      	b.n	8000e08 <__aeabi_dsub+0x108>
 8001184:	001a      	movs	r2, r3
 8001186:	3e1f      	subs	r6, #31
 8001188:	40f2      	lsrs	r2, r6
 800118a:	0016      	movs	r6, r2
 800118c:	2920      	cmp	r1, #32
 800118e:	d003      	beq.n	8001198 <__aeabi_dsub+0x498>
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	1a51      	subs	r1, r2, r1
 8001194:	408b      	lsls	r3, r1
 8001196:	431c      	orrs	r4, r3
 8001198:	1e62      	subs	r2, r4, #1
 800119a:	4194      	sbcs	r4, r2
 800119c:	2300      	movs	r3, #0
 800119e:	4334      	orrs	r4, r6
 80011a0:	4698      	mov	r8, r3
 80011a2:	2600      	movs	r6, #0
 80011a4:	e71d      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 80011a6:	000c      	movs	r4, r1
 80011a8:	3a20      	subs	r2, #32
 80011aa:	40d4      	lsrs	r4, r2
 80011ac:	0022      	movs	r2, r4
 80011ae:	4664      	mov	r4, ip
 80011b0:	2c20      	cmp	r4, #32
 80011b2:	d004      	beq.n	80011be <__aeabi_dsub+0x4be>
 80011b4:	2740      	movs	r7, #64	; 0x40
 80011b6:	1b3f      	subs	r7, r7, r4
 80011b8:	40b9      	lsls	r1, r7
 80011ba:	4308      	orrs	r0, r1
 80011bc:	4680      	mov	r8, r0
 80011be:	4644      	mov	r4, r8
 80011c0:	1e61      	subs	r1, r4, #1
 80011c2:	418c      	sbcs	r4, r1
 80011c4:	4322      	orrs	r2, r4
 80011c6:	e5e9      	b.n	8000d9c <__aeabi_dsub+0x9c>
 80011c8:	464c      	mov	r4, r9
 80011ca:	4323      	orrs	r3, r4
 80011cc:	001c      	movs	r4, r3
 80011ce:	1e63      	subs	r3, r4, #1
 80011d0:	419c      	sbcs	r4, r3
 80011d2:	1b04      	subs	r4, r0, r4
 80011d4:	42a0      	cmp	r0, r4
 80011d6:	419b      	sbcs	r3, r3
 80011d8:	425b      	negs	r3, r3
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	4698      	mov	r8, r3
 80011de:	465d      	mov	r5, fp
 80011e0:	0016      	movs	r6, r2
 80011e2:	e5e2      	b.n	8000daa <__aeabi_dsub+0xaa>
 80011e4:	464e      	mov	r6, r9
 80011e6:	431e      	orrs	r6, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_dsub+0x4ec>
 80011ea:	e0ae      	b.n	800134a <__aeabi_dsub+0x64a>
 80011ec:	1e66      	subs	r6, r4, #1
 80011ee:	2c01      	cmp	r4, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x4f4>
 80011f2:	e0fd      	b.n	80013f0 <__aeabi_dsub+0x6f0>
 80011f4:	4f7b      	ldr	r7, [pc, #492]	; (80013e4 <__aeabi_dsub+0x6e4>)
 80011f6:	42bc      	cmp	r4, r7
 80011f8:	d100      	bne.n	80011fc <__aeabi_dsub+0x4fc>
 80011fa:	e107      	b.n	800140c <__aeabi_dsub+0x70c>
 80011fc:	46b4      	mov	ip, r6
 80011fe:	e69b      	b.n	8000f38 <__aeabi_dsub+0x238>
 8001200:	4664      	mov	r4, ip
 8001202:	2220      	movs	r2, #32
 8001204:	1b12      	subs	r2, r2, r4
 8001206:	000c      	movs	r4, r1
 8001208:	4094      	lsls	r4, r2
 800120a:	0007      	movs	r7, r0
 800120c:	4090      	lsls	r0, r2
 800120e:	46a0      	mov	r8, r4
 8001210:	4664      	mov	r4, ip
 8001212:	1e42      	subs	r2, r0, #1
 8001214:	4190      	sbcs	r0, r2
 8001216:	4662      	mov	r2, ip
 8001218:	40e7      	lsrs	r7, r4
 800121a:	4644      	mov	r4, r8
 800121c:	40d1      	lsrs	r1, r2
 800121e:	433c      	orrs	r4, r7
 8001220:	4304      	orrs	r4, r0
 8001222:	185b      	adds	r3, r3, r1
 8001224:	e6f3      	b.n	800100e <__aeabi_dsub+0x30e>
 8001226:	4c6f      	ldr	r4, [pc, #444]	; (80013e4 <__aeabi_dsub+0x6e4>)
 8001228:	42a2      	cmp	r2, r4
 800122a:	d100      	bne.n	800122e <__aeabi_dsub+0x52e>
 800122c:	e0d5      	b.n	80013da <__aeabi_dsub+0x6da>
 800122e:	4448      	add	r0, r9
 8001230:	185b      	adds	r3, r3, r1
 8001232:	4548      	cmp	r0, r9
 8001234:	4189      	sbcs	r1, r1
 8001236:	4249      	negs	r1, r1
 8001238:	185b      	adds	r3, r3, r1
 800123a:	07dc      	lsls	r4, r3, #31
 800123c:	0840      	lsrs	r0, r0, #1
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	4698      	mov	r8, r3
 8001242:	0016      	movs	r6, r2
 8001244:	4304      	orrs	r4, r0
 8001246:	e6cc      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 8001248:	2a00      	cmp	r2, #0
 800124a:	d000      	beq.n	800124e <__aeabi_dsub+0x54e>
 800124c:	e082      	b.n	8001354 <__aeabi_dsub+0x654>
 800124e:	000a      	movs	r2, r1
 8001250:	4302      	orrs	r2, r0
 8001252:	d140      	bne.n	80012d6 <__aeabi_dsub+0x5d6>
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	2500      	movs	r5, #0
 8001258:	031b      	lsls	r3, r3, #12
 800125a:	e713      	b.n	8001084 <__aeabi_dsub+0x384>
 800125c:	074b      	lsls	r3, r1, #29
 800125e:	08c2      	lsrs	r2, r0, #3
 8001260:	431a      	orrs	r2, r3
 8001262:	465d      	mov	r5, fp
 8001264:	08cb      	lsrs	r3, r1, #3
 8001266:	e6c5      	b.n	8000ff4 <__aeabi_dsub+0x2f4>
 8001268:	464a      	mov	r2, r9
 800126a:	1a84      	subs	r4, r0, r2
 800126c:	42a0      	cmp	r0, r4
 800126e:	4192      	sbcs	r2, r2
 8001270:	1acb      	subs	r3, r1, r3
 8001272:	4252      	negs	r2, r2
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	4698      	mov	r8, r3
 8001278:	465d      	mov	r5, fp
 800127a:	e59e      	b.n	8000dba <__aeabi_dsub+0xba>
 800127c:	464a      	mov	r2, r9
 800127e:	0759      	lsls	r1, r3, #29
 8001280:	08d2      	lsrs	r2, r2, #3
 8001282:	430a      	orrs	r2, r1
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	e6f9      	b.n	800107c <__aeabi_dsub+0x37c>
 8001288:	464a      	mov	r2, r9
 800128a:	1a14      	subs	r4, r2, r0
 800128c:	45a1      	cmp	r9, r4
 800128e:	4192      	sbcs	r2, r2
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	4252      	negs	r2, r2
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	4698      	mov	r8, r3
 8001298:	2601      	movs	r6, #1
 800129a:	e586      	b.n	8000daa <__aeabi_dsub+0xaa>
 800129c:	464a      	mov	r2, r9
 800129e:	0759      	lsls	r1, r3, #29
 80012a0:	08d2      	lsrs	r2, r2, #3
 80012a2:	430a      	orrs	r2, r1
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	e6a5      	b.n	8000ff4 <__aeabi_dsub+0x2f4>
 80012a8:	464c      	mov	r4, r9
 80012aa:	4323      	orrs	r3, r4
 80012ac:	001c      	movs	r4, r3
 80012ae:	1e63      	subs	r3, r4, #1
 80012b0:	419c      	sbcs	r4, r3
 80012b2:	e65b      	b.n	8000f6c <__aeabi_dsub+0x26c>
 80012b4:	4665      	mov	r5, ip
 80012b6:	001e      	movs	r6, r3
 80012b8:	3d20      	subs	r5, #32
 80012ba:	40ee      	lsrs	r6, r5
 80012bc:	2c20      	cmp	r4, #32
 80012be:	d005      	beq.n	80012cc <__aeabi_dsub+0x5cc>
 80012c0:	2540      	movs	r5, #64	; 0x40
 80012c2:	1b2d      	subs	r5, r5, r4
 80012c4:	40ab      	lsls	r3, r5
 80012c6:	464c      	mov	r4, r9
 80012c8:	431c      	orrs	r4, r3
 80012ca:	46a2      	mov	sl, r4
 80012cc:	4654      	mov	r4, sl
 80012ce:	1e63      	subs	r3, r4, #1
 80012d0:	419c      	sbcs	r4, r3
 80012d2:	4334      	orrs	r4, r6
 80012d4:	e77d      	b.n	80011d2 <__aeabi_dsub+0x4d2>
 80012d6:	074b      	lsls	r3, r1, #29
 80012d8:	08c2      	lsrs	r2, r0, #3
 80012da:	431a      	orrs	r2, r3
 80012dc:	465d      	mov	r5, fp
 80012de:	08cb      	lsrs	r3, r1, #3
 80012e0:	e6cc      	b.n	800107c <__aeabi_dsub+0x37c>
 80012e2:	000a      	movs	r2, r1
 80012e4:	4302      	orrs	r2, r0
 80012e6:	d100      	bne.n	80012ea <__aeabi_dsub+0x5ea>
 80012e8:	e736      	b.n	8001158 <__aeabi_dsub+0x458>
 80012ea:	074b      	lsls	r3, r1, #29
 80012ec:	08c2      	lsrs	r2, r0, #3
 80012ee:	431a      	orrs	r2, r3
 80012f0:	465d      	mov	r5, fp
 80012f2:	08cb      	lsrs	r3, r1, #3
 80012f4:	e681      	b.n	8000ffa <__aeabi_dsub+0x2fa>
 80012f6:	464a      	mov	r2, r9
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	42a0      	cmp	r0, r4
 80012fc:	4192      	sbcs	r2, r2
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4252      	negs	r2, r2
 8001302:	1a9b      	subs	r3, r3, r2
 8001304:	4698      	mov	r8, r3
 8001306:	465d      	mov	r5, fp
 8001308:	2601      	movs	r6, #1
 800130a:	e54e      	b.n	8000daa <__aeabi_dsub+0xaa>
 800130c:	074b      	lsls	r3, r1, #29
 800130e:	08c2      	lsrs	r2, r0, #3
 8001310:	431a      	orrs	r2, r3
 8001312:	08cb      	lsrs	r3, r1, #3
 8001314:	e6b2      	b.n	800107c <__aeabi_dsub+0x37c>
 8001316:	464a      	mov	r2, r9
 8001318:	1a14      	subs	r4, r2, r0
 800131a:	45a1      	cmp	r9, r4
 800131c:	4192      	sbcs	r2, r2
 800131e:	1a5f      	subs	r7, r3, r1
 8001320:	4252      	negs	r2, r2
 8001322:	1aba      	subs	r2, r7, r2
 8001324:	4690      	mov	r8, r2
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	d56b      	bpl.n	8001402 <__aeabi_dsub+0x702>
 800132a:	464a      	mov	r2, r9
 800132c:	1a84      	subs	r4, r0, r2
 800132e:	42a0      	cmp	r0, r4
 8001330:	4192      	sbcs	r2, r2
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	4252      	negs	r2, r2
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	4698      	mov	r8, r3
 800133a:	465d      	mov	r5, fp
 800133c:	e564      	b.n	8000e08 <__aeabi_dsub+0x108>
 800133e:	074b      	lsls	r3, r1, #29
 8001340:	08c2      	lsrs	r2, r0, #3
 8001342:	431a      	orrs	r2, r3
 8001344:	465d      	mov	r5, fp
 8001346:	08cb      	lsrs	r3, r1, #3
 8001348:	e698      	b.n	800107c <__aeabi_dsub+0x37c>
 800134a:	074b      	lsls	r3, r1, #29
 800134c:	08c2      	lsrs	r2, r0, #3
 800134e:	431a      	orrs	r2, r3
 8001350:	08cb      	lsrs	r3, r1, #3
 8001352:	e64f      	b.n	8000ff4 <__aeabi_dsub+0x2f4>
 8001354:	000a      	movs	r2, r1
 8001356:	4302      	orrs	r2, r0
 8001358:	d090      	beq.n	800127c <__aeabi_dsub+0x57c>
 800135a:	464a      	mov	r2, r9
 800135c:	075c      	lsls	r4, r3, #29
 800135e:	08d2      	lsrs	r2, r2, #3
 8001360:	4314      	orrs	r4, r2
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	0312      	lsls	r2, r2, #12
 8001368:	4213      	tst	r3, r2
 800136a:	d008      	beq.n	800137e <__aeabi_dsub+0x67e>
 800136c:	08ce      	lsrs	r6, r1, #3
 800136e:	4216      	tst	r6, r2
 8001370:	d105      	bne.n	800137e <__aeabi_dsub+0x67e>
 8001372:	08c0      	lsrs	r0, r0, #3
 8001374:	0749      	lsls	r1, r1, #29
 8001376:	4308      	orrs	r0, r1
 8001378:	0004      	movs	r4, r0
 800137a:	465d      	mov	r5, fp
 800137c:	0033      	movs	r3, r6
 800137e:	0f61      	lsrs	r1, r4, #29
 8001380:	00e2      	lsls	r2, r4, #3
 8001382:	0749      	lsls	r1, r1, #29
 8001384:	08d2      	lsrs	r2, r2, #3
 8001386:	430a      	orrs	r2, r1
 8001388:	e678      	b.n	800107c <__aeabi_dsub+0x37c>
 800138a:	074b      	lsls	r3, r1, #29
 800138c:	08c2      	lsrs	r2, r0, #3
 800138e:	431a      	orrs	r2, r3
 8001390:	08cb      	lsrs	r3, r1, #3
 8001392:	e632      	b.n	8000ffa <__aeabi_dsub+0x2fa>
 8001394:	4448      	add	r0, r9
 8001396:	185b      	adds	r3, r3, r1
 8001398:	4548      	cmp	r0, r9
 800139a:	4192      	sbcs	r2, r2
 800139c:	4698      	mov	r8, r3
 800139e:	4252      	negs	r2, r2
 80013a0:	4490      	add	r8, r2
 80013a2:	4643      	mov	r3, r8
 80013a4:	0004      	movs	r4, r0
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	d400      	bmi.n	80013ac <__aeabi_dsub+0x6ac>
 80013aa:	e61a      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 80013ac:	4642      	mov	r2, r8
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <__aeabi_dsub+0x6e8>)
 80013b0:	2601      	movs	r6, #1
 80013b2:	401a      	ands	r2, r3
 80013b4:	4690      	mov	r8, r2
 80013b6:	e614      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 80013b8:	4666      	mov	r6, ip
 80013ba:	001f      	movs	r7, r3
 80013bc:	3e20      	subs	r6, #32
 80013be:	40f7      	lsrs	r7, r6
 80013c0:	2c20      	cmp	r4, #32
 80013c2:	d005      	beq.n	80013d0 <__aeabi_dsub+0x6d0>
 80013c4:	2640      	movs	r6, #64	; 0x40
 80013c6:	1b36      	subs	r6, r6, r4
 80013c8:	40b3      	lsls	r3, r6
 80013ca:	464c      	mov	r4, r9
 80013cc:	431c      	orrs	r4, r3
 80013ce:	46a2      	mov	sl, r4
 80013d0:	4654      	mov	r4, sl
 80013d2:	1e63      	subs	r3, r4, #1
 80013d4:	419c      	sbcs	r4, r3
 80013d6:	433c      	orrs	r4, r7
 80013d8:	e5c8      	b.n	8000f6c <__aeabi_dsub+0x26c>
 80013da:	0011      	movs	r1, r2
 80013dc:	2300      	movs	r3, #0
 80013de:	2200      	movs	r2, #0
 80013e0:	e532      	b.n	8000e48 <__aeabi_dsub+0x148>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	000007fe 	.word	0x000007fe
 80013f0:	464a      	mov	r2, r9
 80013f2:	1814      	adds	r4, r2, r0
 80013f4:	4284      	cmp	r4, r0
 80013f6:	4192      	sbcs	r2, r2
 80013f8:	185b      	adds	r3, r3, r1
 80013fa:	4698      	mov	r8, r3
 80013fc:	4252      	negs	r2, r2
 80013fe:	4490      	add	r8, r2
 8001400:	e5e9      	b.n	8000fd6 <__aeabi_dsub+0x2d6>
 8001402:	4642      	mov	r2, r8
 8001404:	4322      	orrs	r2, r4
 8001406:	d100      	bne.n	800140a <__aeabi_dsub+0x70a>
 8001408:	e6a6      	b.n	8001158 <__aeabi_dsub+0x458>
 800140a:	e5ea      	b.n	8000fe2 <__aeabi_dsub+0x2e2>
 800140c:	074b      	lsls	r3, r1, #29
 800140e:	08c2      	lsrs	r2, r0, #3
 8001410:	431a      	orrs	r2, r3
 8001412:	08cb      	lsrs	r3, r1, #3
 8001414:	e632      	b.n	800107c <__aeabi_dsub+0x37c>
 8001416:	2200      	movs	r2, #0
 8001418:	4901      	ldr	r1, [pc, #4]	; (8001420 <__aeabi_dsub+0x720>)
 800141a:	0013      	movs	r3, r2
 800141c:	e514      	b.n	8000e48 <__aeabi_dsub+0x148>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	000007ff 	.word	0x000007ff

08001424 <__aeabi_d2iz>:
 8001424:	000a      	movs	r2, r1
 8001426:	b530      	push	{r4, r5, lr}
 8001428:	4c13      	ldr	r4, [pc, #76]	; (8001478 <__aeabi_d2iz+0x54>)
 800142a:	0053      	lsls	r3, r2, #1
 800142c:	0309      	lsls	r1, r1, #12
 800142e:	0005      	movs	r5, r0
 8001430:	0b09      	lsrs	r1, r1, #12
 8001432:	2000      	movs	r0, #0
 8001434:	0d5b      	lsrs	r3, r3, #21
 8001436:	0fd2      	lsrs	r2, r2, #31
 8001438:	42a3      	cmp	r3, r4
 800143a:	dd04      	ble.n	8001446 <__aeabi_d2iz+0x22>
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <__aeabi_d2iz+0x58>)
 800143e:	4283      	cmp	r3, r0
 8001440:	dd02      	ble.n	8001448 <__aeabi_d2iz+0x24>
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <__aeabi_d2iz+0x5c>)
 8001444:	18d0      	adds	r0, r2, r3
 8001446:	bd30      	pop	{r4, r5, pc}
 8001448:	2080      	movs	r0, #128	; 0x80
 800144a:	0340      	lsls	r0, r0, #13
 800144c:	4301      	orrs	r1, r0
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <__aeabi_d2iz+0x60>)
 8001450:	1ac0      	subs	r0, r0, r3
 8001452:	281f      	cmp	r0, #31
 8001454:	dd08      	ble.n	8001468 <__aeabi_d2iz+0x44>
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <__aeabi_d2iz+0x64>)
 8001458:	1ac3      	subs	r3, r0, r3
 800145a:	40d9      	lsrs	r1, r3
 800145c:	000b      	movs	r3, r1
 800145e:	4258      	negs	r0, r3
 8001460:	2a00      	cmp	r2, #0
 8001462:	d1f0      	bne.n	8001446 <__aeabi_d2iz+0x22>
 8001464:	0018      	movs	r0, r3
 8001466:	e7ee      	b.n	8001446 <__aeabi_d2iz+0x22>
 8001468:	4c08      	ldr	r4, [pc, #32]	; (800148c <__aeabi_d2iz+0x68>)
 800146a:	40c5      	lsrs	r5, r0
 800146c:	46a4      	mov	ip, r4
 800146e:	4463      	add	r3, ip
 8001470:	4099      	lsls	r1, r3
 8001472:	000b      	movs	r3, r1
 8001474:	432b      	orrs	r3, r5
 8001476:	e7f2      	b.n	800145e <__aeabi_d2iz+0x3a>
 8001478:	000003fe 	.word	0x000003fe
 800147c:	0000041d 	.word	0x0000041d
 8001480:	7fffffff 	.word	0x7fffffff
 8001484:	00000433 	.word	0x00000433
 8001488:	00000413 	.word	0x00000413
 800148c:	fffffbed 	.word	0xfffffbed

08001490 <__aeabi_i2d>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	2800      	cmp	r0, #0
 8001494:	d016      	beq.n	80014c4 <__aeabi_i2d+0x34>
 8001496:	17c3      	asrs	r3, r0, #31
 8001498:	18c5      	adds	r5, r0, r3
 800149a:	405d      	eors	r5, r3
 800149c:	0fc4      	lsrs	r4, r0, #31
 800149e:	0028      	movs	r0, r5
 80014a0:	f000 f934 	bl	800170c <__clzsi2>
 80014a4:	4a11      	ldr	r2, [pc, #68]	; (80014ec <__aeabi_i2d+0x5c>)
 80014a6:	1a12      	subs	r2, r2, r0
 80014a8:	280a      	cmp	r0, #10
 80014aa:	dc16      	bgt.n	80014da <__aeabi_i2d+0x4a>
 80014ac:	0003      	movs	r3, r0
 80014ae:	002e      	movs	r6, r5
 80014b0:	3315      	adds	r3, #21
 80014b2:	409e      	lsls	r6, r3
 80014b4:	230b      	movs	r3, #11
 80014b6:	1a18      	subs	r0, r3, r0
 80014b8:	40c5      	lsrs	r5, r0
 80014ba:	0553      	lsls	r3, r2, #21
 80014bc:	032d      	lsls	r5, r5, #12
 80014be:	0b2d      	lsrs	r5, r5, #12
 80014c0:	0d5b      	lsrs	r3, r3, #21
 80014c2:	e003      	b.n	80014cc <__aeabi_i2d+0x3c>
 80014c4:	2400      	movs	r4, #0
 80014c6:	2300      	movs	r3, #0
 80014c8:	2500      	movs	r5, #0
 80014ca:	2600      	movs	r6, #0
 80014cc:	051b      	lsls	r3, r3, #20
 80014ce:	432b      	orrs	r3, r5
 80014d0:	07e4      	lsls	r4, r4, #31
 80014d2:	4323      	orrs	r3, r4
 80014d4:	0030      	movs	r0, r6
 80014d6:	0019      	movs	r1, r3
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
 80014da:	380b      	subs	r0, #11
 80014dc:	4085      	lsls	r5, r0
 80014de:	0553      	lsls	r3, r2, #21
 80014e0:	032d      	lsls	r5, r5, #12
 80014e2:	2600      	movs	r6, #0
 80014e4:	0b2d      	lsrs	r5, r5, #12
 80014e6:	0d5b      	lsrs	r3, r3, #21
 80014e8:	e7f0      	b.n	80014cc <__aeabi_i2d+0x3c>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	0000041e 	.word	0x0000041e

080014f0 <__aeabi_f2d>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	0043      	lsls	r3, r0, #1
 80014f4:	0246      	lsls	r6, r0, #9
 80014f6:	0fc4      	lsrs	r4, r0, #31
 80014f8:	20fe      	movs	r0, #254	; 0xfe
 80014fa:	0e1b      	lsrs	r3, r3, #24
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	0a75      	lsrs	r5, r6, #9
 8001500:	4208      	tst	r0, r1
 8001502:	d00c      	beq.n	800151e <__aeabi_f2d+0x2e>
 8001504:	22e0      	movs	r2, #224	; 0xe0
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4694      	mov	ip, r2
 800150a:	076d      	lsls	r5, r5, #29
 800150c:	0b36      	lsrs	r6, r6, #12
 800150e:	4463      	add	r3, ip
 8001510:	051b      	lsls	r3, r3, #20
 8001512:	4333      	orrs	r3, r6
 8001514:	07e4      	lsls	r4, r4, #31
 8001516:	4323      	orrs	r3, r4
 8001518:	0028      	movs	r0, r5
 800151a:	0019      	movs	r1, r3
 800151c:	bd70      	pop	{r4, r5, r6, pc}
 800151e:	2b00      	cmp	r3, #0
 8001520:	d114      	bne.n	800154c <__aeabi_f2d+0x5c>
 8001522:	2d00      	cmp	r5, #0
 8001524:	d01b      	beq.n	800155e <__aeabi_f2d+0x6e>
 8001526:	0028      	movs	r0, r5
 8001528:	f000 f8f0 	bl	800170c <__clzsi2>
 800152c:	280a      	cmp	r0, #10
 800152e:	dc1c      	bgt.n	800156a <__aeabi_f2d+0x7a>
 8001530:	230b      	movs	r3, #11
 8001532:	002a      	movs	r2, r5
 8001534:	1a1b      	subs	r3, r3, r0
 8001536:	40da      	lsrs	r2, r3
 8001538:	0003      	movs	r3, r0
 800153a:	3315      	adds	r3, #21
 800153c:	409d      	lsls	r5, r3
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <__aeabi_f2d+0x88>)
 8001540:	0312      	lsls	r2, r2, #12
 8001542:	1a1b      	subs	r3, r3, r0
 8001544:	055b      	lsls	r3, r3, #21
 8001546:	0b16      	lsrs	r6, r2, #12
 8001548:	0d5b      	lsrs	r3, r3, #21
 800154a:	e7e1      	b.n	8001510 <__aeabi_f2d+0x20>
 800154c:	2d00      	cmp	r5, #0
 800154e:	d009      	beq.n	8001564 <__aeabi_f2d+0x74>
 8001550:	0b32      	lsrs	r2, r6, #12
 8001552:	2680      	movs	r6, #128	; 0x80
 8001554:	0336      	lsls	r6, r6, #12
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <__aeabi_f2d+0x8c>)
 8001558:	076d      	lsls	r5, r5, #29
 800155a:	4316      	orrs	r6, r2
 800155c:	e7d8      	b.n	8001510 <__aeabi_f2d+0x20>
 800155e:	2300      	movs	r3, #0
 8001560:	2600      	movs	r6, #0
 8001562:	e7d5      	b.n	8001510 <__aeabi_f2d+0x20>
 8001564:	2600      	movs	r6, #0
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <__aeabi_f2d+0x8c>)
 8001568:	e7d2      	b.n	8001510 <__aeabi_f2d+0x20>
 800156a:	0003      	movs	r3, r0
 800156c:	002a      	movs	r2, r5
 800156e:	3b0b      	subs	r3, #11
 8001570:	409a      	lsls	r2, r3
 8001572:	2500      	movs	r5, #0
 8001574:	e7e3      	b.n	800153e <__aeabi_f2d+0x4e>
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	00000389 	.word	0x00000389
 800157c:	000007ff 	.word	0x000007ff

08001580 <__aeabi_d2f>:
 8001580:	0002      	movs	r2, r0
 8001582:	004b      	lsls	r3, r1, #1
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	0308      	lsls	r0, r1, #12
 8001588:	0d5b      	lsrs	r3, r3, #21
 800158a:	4e3d      	ldr	r6, [pc, #244]	; (8001680 <__aeabi_d2f+0x100>)
 800158c:	0fcc      	lsrs	r4, r1, #31
 800158e:	0a40      	lsrs	r0, r0, #9
 8001590:	0f51      	lsrs	r1, r2, #29
 8001592:	1c5f      	adds	r7, r3, #1
 8001594:	4308      	orrs	r0, r1
 8001596:	00d5      	lsls	r5, r2, #3
 8001598:	4237      	tst	r7, r6
 800159a:	d00a      	beq.n	80015b2 <__aeabi_d2f+0x32>
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <__aeabi_d2f+0x104>)
 800159e:	185e      	adds	r6, r3, r1
 80015a0:	2efe      	cmp	r6, #254	; 0xfe
 80015a2:	dd16      	ble.n	80015d2 <__aeabi_d2f+0x52>
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	2100      	movs	r1, #0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	430b      	orrs	r3, r1
 80015ac:	07e0      	lsls	r0, r4, #31
 80015ae:	4318      	orrs	r0, r3
 80015b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <__aeabi_d2f+0x44>
 80015b6:	4328      	orrs	r0, r5
 80015b8:	d027      	beq.n	800160a <__aeabi_d2f+0x8a>
 80015ba:	2105      	movs	r1, #5
 80015bc:	0189      	lsls	r1, r1, #6
 80015be:	0a49      	lsrs	r1, r1, #9
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_d2f+0x28>
 80015c4:	4305      	orrs	r5, r0
 80015c6:	d0ed      	beq.n	80015a4 <__aeabi_d2f+0x24>
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	03c9      	lsls	r1, r1, #15
 80015cc:	23ff      	movs	r3, #255	; 0xff
 80015ce:	4301      	orrs	r1, r0
 80015d0:	e7ea      	b.n	80015a8 <__aeabi_d2f+0x28>
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	dd1c      	ble.n	8001610 <__aeabi_d2f+0x90>
 80015d6:	0192      	lsls	r2, r2, #6
 80015d8:	0011      	movs	r1, r2
 80015da:	1e4a      	subs	r2, r1, #1
 80015dc:	4191      	sbcs	r1, r2
 80015de:	00c0      	lsls	r0, r0, #3
 80015e0:	0f6d      	lsrs	r5, r5, #29
 80015e2:	4301      	orrs	r1, r0
 80015e4:	4329      	orrs	r1, r5
 80015e6:	074b      	lsls	r3, r1, #29
 80015e8:	d048      	beq.n	800167c <__aeabi_d2f+0xfc>
 80015ea:	230f      	movs	r3, #15
 80015ec:	400b      	ands	r3, r1
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d000      	beq.n	80015f4 <__aeabi_d2f+0x74>
 80015f2:	3104      	adds	r1, #4
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	04db      	lsls	r3, r3, #19
 80015f8:	400b      	ands	r3, r1
 80015fa:	d03f      	beq.n	800167c <__aeabi_d2f+0xfc>
 80015fc:	1c72      	adds	r2, r6, #1
 80015fe:	2efe      	cmp	r6, #254	; 0xfe
 8001600:	d0d0      	beq.n	80015a4 <__aeabi_d2f+0x24>
 8001602:	0189      	lsls	r1, r1, #6
 8001604:	0a49      	lsrs	r1, r1, #9
 8001606:	b2d3      	uxtb	r3, r2
 8001608:	e7ce      	b.n	80015a8 <__aeabi_d2f+0x28>
 800160a:	2300      	movs	r3, #0
 800160c:	2100      	movs	r1, #0
 800160e:	e7cb      	b.n	80015a8 <__aeabi_d2f+0x28>
 8001610:	0032      	movs	r2, r6
 8001612:	3217      	adds	r2, #23
 8001614:	db22      	blt.n	800165c <__aeabi_d2f+0xdc>
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	221e      	movs	r2, #30
 800161a:	0409      	lsls	r1, r1, #16
 800161c:	4308      	orrs	r0, r1
 800161e:	1b92      	subs	r2, r2, r6
 8001620:	2a1f      	cmp	r2, #31
 8001622:	dd1d      	ble.n	8001660 <__aeabi_d2f+0xe0>
 8001624:	2102      	movs	r1, #2
 8001626:	4249      	negs	r1, r1
 8001628:	1b8e      	subs	r6, r1, r6
 800162a:	0001      	movs	r1, r0
 800162c:	40f1      	lsrs	r1, r6
 800162e:	000e      	movs	r6, r1
 8001630:	2a20      	cmp	r2, #32
 8001632:	d004      	beq.n	800163e <__aeabi_d2f+0xbe>
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <__aeabi_d2f+0x108>)
 8001636:	4694      	mov	ip, r2
 8001638:	4463      	add	r3, ip
 800163a:	4098      	lsls	r0, r3
 800163c:	4305      	orrs	r5, r0
 800163e:	0029      	movs	r1, r5
 8001640:	1e4d      	subs	r5, r1, #1
 8001642:	41a9      	sbcs	r1, r5
 8001644:	4331      	orrs	r1, r6
 8001646:	2600      	movs	r6, #0
 8001648:	074b      	lsls	r3, r1, #29
 800164a:	d1ce      	bne.n	80015ea <__aeabi_d2f+0x6a>
 800164c:	2080      	movs	r0, #128	; 0x80
 800164e:	000b      	movs	r3, r1
 8001650:	04c0      	lsls	r0, r0, #19
 8001652:	2201      	movs	r2, #1
 8001654:	4003      	ands	r3, r0
 8001656:	4201      	tst	r1, r0
 8001658:	d1d3      	bne.n	8001602 <__aeabi_d2f+0x82>
 800165a:	e7af      	b.n	80015bc <__aeabi_d2f+0x3c>
 800165c:	2300      	movs	r3, #0
 800165e:	e7ac      	b.n	80015ba <__aeabi_d2f+0x3a>
 8001660:	490a      	ldr	r1, [pc, #40]	; (800168c <__aeabi_d2f+0x10c>)
 8001662:	468c      	mov	ip, r1
 8001664:	0029      	movs	r1, r5
 8001666:	4463      	add	r3, ip
 8001668:	40d1      	lsrs	r1, r2
 800166a:	409d      	lsls	r5, r3
 800166c:	000a      	movs	r2, r1
 800166e:	0029      	movs	r1, r5
 8001670:	4098      	lsls	r0, r3
 8001672:	1e4d      	subs	r5, r1, #1
 8001674:	41a9      	sbcs	r1, r5
 8001676:	4301      	orrs	r1, r0
 8001678:	4311      	orrs	r1, r2
 800167a:	e7e4      	b.n	8001646 <__aeabi_d2f+0xc6>
 800167c:	0033      	movs	r3, r6
 800167e:	e79d      	b.n	80015bc <__aeabi_d2f+0x3c>
 8001680:	000007fe 	.word	0x000007fe
 8001684:	fffffc80 	.word	0xfffffc80
 8001688:	fffffca2 	.word	0xfffffca2
 800168c:	fffffc82 	.word	0xfffffc82

08001690 <__aeabi_cdrcmple>:
 8001690:	4684      	mov	ip, r0
 8001692:	1c10      	adds	r0, r2, #0
 8001694:	4662      	mov	r2, ip
 8001696:	468c      	mov	ip, r1
 8001698:	1c19      	adds	r1, r3, #0
 800169a:	4663      	mov	r3, ip
 800169c:	e000      	b.n	80016a0 <__aeabi_cdcmpeq>
 800169e:	46c0      	nop			; (mov r8, r8)

080016a0 <__aeabi_cdcmpeq>:
 80016a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016a2:	f000 f8ff 	bl	80018a4 <__ledf2>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d401      	bmi.n	80016ae <__aeabi_cdcmpeq+0xe>
 80016aa:	2100      	movs	r1, #0
 80016ac:	42c8      	cmn	r0, r1
 80016ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016b0 <__aeabi_dcmpeq>:
 80016b0:	b510      	push	{r4, lr}
 80016b2:	f000 f849 	bl	8001748 <__eqdf2>
 80016b6:	4240      	negs	r0, r0
 80016b8:	3001      	adds	r0, #1
 80016ba:	bd10      	pop	{r4, pc}

080016bc <__aeabi_dcmplt>:
 80016bc:	b510      	push	{r4, lr}
 80016be:	f000 f8f1 	bl	80018a4 <__ledf2>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	db01      	blt.n	80016ca <__aeabi_dcmplt+0xe>
 80016c6:	2000      	movs	r0, #0
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	2001      	movs	r0, #1
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)

080016d0 <__aeabi_dcmple>:
 80016d0:	b510      	push	{r4, lr}
 80016d2:	f000 f8e7 	bl	80018a4 <__ledf2>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	dd01      	ble.n	80016de <__aeabi_dcmple+0xe>
 80016da:	2000      	movs	r0, #0
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	2001      	movs	r0, #1
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)

080016e4 <__aeabi_dcmpgt>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	f000 f86b 	bl	80017c0 <__gedf2>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	dc01      	bgt.n	80016f2 <__aeabi_dcmpgt+0xe>
 80016ee:	2000      	movs	r0, #0
 80016f0:	bd10      	pop	{r4, pc}
 80016f2:	2001      	movs	r0, #1
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)

080016f8 <__aeabi_dcmpge>:
 80016f8:	b510      	push	{r4, lr}
 80016fa:	f000 f861 	bl	80017c0 <__gedf2>
 80016fe:	2800      	cmp	r0, #0
 8001700:	da01      	bge.n	8001706 <__aeabi_dcmpge+0xe>
 8001702:	2000      	movs	r0, #0
 8001704:	bd10      	pop	{r4, pc}
 8001706:	2001      	movs	r0, #1
 8001708:	bd10      	pop	{r4, pc}
 800170a:	46c0      	nop			; (mov r8, r8)

0800170c <__clzsi2>:
 800170c:	211c      	movs	r1, #28
 800170e:	2301      	movs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	4298      	cmp	r0, r3
 8001714:	d301      	bcc.n	800171a <__clzsi2+0xe>
 8001716:	0c00      	lsrs	r0, r0, #16
 8001718:	3910      	subs	r1, #16
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	4298      	cmp	r0, r3
 800171e:	d301      	bcc.n	8001724 <__clzsi2+0x18>
 8001720:	0a00      	lsrs	r0, r0, #8
 8001722:	3908      	subs	r1, #8
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	4298      	cmp	r0, r3
 8001728:	d301      	bcc.n	800172e <__clzsi2+0x22>
 800172a:	0900      	lsrs	r0, r0, #4
 800172c:	3904      	subs	r1, #4
 800172e:	a202      	add	r2, pc, #8	; (adr r2, 8001738 <__clzsi2+0x2c>)
 8001730:	5c10      	ldrb	r0, [r2, r0]
 8001732:	1840      	adds	r0, r0, r1
 8001734:	4770      	bx	lr
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	02020304 	.word	0x02020304
 800173c:	01010101 	.word	0x01010101
	...

08001748 <__eqdf2>:
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	464f      	mov	r7, r9
 800174c:	4646      	mov	r6, r8
 800174e:	46d6      	mov	lr, sl
 8001750:	4694      	mov	ip, r2
 8001752:	4691      	mov	r9, r2
 8001754:	031a      	lsls	r2, r3, #12
 8001756:	0b12      	lsrs	r2, r2, #12
 8001758:	4d18      	ldr	r5, [pc, #96]	; (80017bc <__eqdf2+0x74>)
 800175a:	b5c0      	push	{r6, r7, lr}
 800175c:	004c      	lsls	r4, r1, #1
 800175e:	030f      	lsls	r7, r1, #12
 8001760:	4692      	mov	sl, r2
 8001762:	005a      	lsls	r2, r3, #1
 8001764:	0006      	movs	r6, r0
 8001766:	4680      	mov	r8, r0
 8001768:	0b3f      	lsrs	r7, r7, #12
 800176a:	2001      	movs	r0, #1
 800176c:	0d64      	lsrs	r4, r4, #21
 800176e:	0fc9      	lsrs	r1, r1, #31
 8001770:	0d52      	lsrs	r2, r2, #21
 8001772:	0fdb      	lsrs	r3, r3, #31
 8001774:	42ac      	cmp	r4, r5
 8001776:	d00a      	beq.n	800178e <__eqdf2+0x46>
 8001778:	42aa      	cmp	r2, r5
 800177a:	d003      	beq.n	8001784 <__eqdf2+0x3c>
 800177c:	4294      	cmp	r4, r2
 800177e:	d101      	bne.n	8001784 <__eqdf2+0x3c>
 8001780:	4557      	cmp	r7, sl
 8001782:	d00d      	beq.n	80017a0 <__eqdf2+0x58>
 8001784:	bce0      	pop	{r5, r6, r7}
 8001786:	46ba      	mov	sl, r7
 8001788:	46b1      	mov	r9, r6
 800178a:	46a8      	mov	r8, r5
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178e:	003d      	movs	r5, r7
 8001790:	4335      	orrs	r5, r6
 8001792:	d1f7      	bne.n	8001784 <__eqdf2+0x3c>
 8001794:	42a2      	cmp	r2, r4
 8001796:	d1f5      	bne.n	8001784 <__eqdf2+0x3c>
 8001798:	4652      	mov	r2, sl
 800179a:	4665      	mov	r5, ip
 800179c:	432a      	orrs	r2, r5
 800179e:	d1f1      	bne.n	8001784 <__eqdf2+0x3c>
 80017a0:	2001      	movs	r0, #1
 80017a2:	45c8      	cmp	r8, r9
 80017a4:	d1ee      	bne.n	8001784 <__eqdf2+0x3c>
 80017a6:	4299      	cmp	r1, r3
 80017a8:	d006      	beq.n	80017b8 <__eqdf2+0x70>
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	d1ea      	bne.n	8001784 <__eqdf2+0x3c>
 80017ae:	433e      	orrs	r6, r7
 80017b0:	0030      	movs	r0, r6
 80017b2:	1e46      	subs	r6, r0, #1
 80017b4:	41b0      	sbcs	r0, r6
 80017b6:	e7e5      	b.n	8001784 <__eqdf2+0x3c>
 80017b8:	2000      	movs	r0, #0
 80017ba:	e7e3      	b.n	8001784 <__eqdf2+0x3c>
 80017bc:	000007ff 	.word	0x000007ff

080017c0 <__gedf2>:
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	464e      	mov	r6, r9
 80017c4:	4645      	mov	r5, r8
 80017c6:	4657      	mov	r7, sl
 80017c8:	46de      	mov	lr, fp
 80017ca:	0004      	movs	r4, r0
 80017cc:	0018      	movs	r0, r3
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	0016      	movs	r6, r2
 80017d2:	031b      	lsls	r3, r3, #12
 80017d4:	0b1b      	lsrs	r3, r3, #12
 80017d6:	4d32      	ldr	r5, [pc, #200]	; (80018a0 <__gedf2+0xe0>)
 80017d8:	030f      	lsls	r7, r1, #12
 80017da:	004a      	lsls	r2, r1, #1
 80017dc:	4699      	mov	r9, r3
 80017de:	0043      	lsls	r3, r0, #1
 80017e0:	46a4      	mov	ip, r4
 80017e2:	46b0      	mov	r8, r6
 80017e4:	0b3f      	lsrs	r7, r7, #12
 80017e6:	0d52      	lsrs	r2, r2, #21
 80017e8:	0fc9      	lsrs	r1, r1, #31
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	0fc0      	lsrs	r0, r0, #31
 80017ee:	42aa      	cmp	r2, r5
 80017f0:	d029      	beq.n	8001846 <__gedf2+0x86>
 80017f2:	42ab      	cmp	r3, r5
 80017f4:	d018      	beq.n	8001828 <__gedf2+0x68>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d12a      	bne.n	8001850 <__gedf2+0x90>
 80017fa:	433c      	orrs	r4, r7
 80017fc:	46a3      	mov	fp, r4
 80017fe:	4265      	negs	r5, r4
 8001800:	4165      	adcs	r5, r4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <__gedf2+0x4c>
 8001806:	464c      	mov	r4, r9
 8001808:	4326      	orrs	r6, r4
 800180a:	d027      	beq.n	800185c <__gedf2+0x9c>
 800180c:	2d00      	cmp	r5, #0
 800180e:	d115      	bne.n	800183c <__gedf2+0x7c>
 8001810:	4281      	cmp	r1, r0
 8001812:	d028      	beq.n	8001866 <__gedf2+0xa6>
 8001814:	2002      	movs	r0, #2
 8001816:	3901      	subs	r1, #1
 8001818:	4008      	ands	r0, r1
 800181a:	3801      	subs	r0, #1
 800181c:	bcf0      	pop	{r4, r5, r6, r7}
 800181e:	46bb      	mov	fp, r7
 8001820:	46b2      	mov	sl, r6
 8001822:	46a9      	mov	r9, r5
 8001824:	46a0      	mov	r8, r4
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	464d      	mov	r5, r9
 800182a:	432e      	orrs	r6, r5
 800182c:	d12f      	bne.n	800188e <__gedf2+0xce>
 800182e:	2a00      	cmp	r2, #0
 8001830:	d1ee      	bne.n	8001810 <__gedf2+0x50>
 8001832:	433c      	orrs	r4, r7
 8001834:	4265      	negs	r5, r4
 8001836:	4165      	adcs	r5, r4
 8001838:	2d00      	cmp	r5, #0
 800183a:	d0e9      	beq.n	8001810 <__gedf2+0x50>
 800183c:	2800      	cmp	r0, #0
 800183e:	d1ed      	bne.n	800181c <__gedf2+0x5c>
 8001840:	2001      	movs	r0, #1
 8001842:	4240      	negs	r0, r0
 8001844:	e7ea      	b.n	800181c <__gedf2+0x5c>
 8001846:	003d      	movs	r5, r7
 8001848:	4325      	orrs	r5, r4
 800184a:	d120      	bne.n	800188e <__gedf2+0xce>
 800184c:	4293      	cmp	r3, r2
 800184e:	d0eb      	beq.n	8001828 <__gedf2+0x68>
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1dd      	bne.n	8001810 <__gedf2+0x50>
 8001854:	464c      	mov	r4, r9
 8001856:	4326      	orrs	r6, r4
 8001858:	d1da      	bne.n	8001810 <__gedf2+0x50>
 800185a:	e7db      	b.n	8001814 <__gedf2+0x54>
 800185c:	465b      	mov	r3, fp
 800185e:	2000      	movs	r0, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0db      	beq.n	800181c <__gedf2+0x5c>
 8001864:	e7d6      	b.n	8001814 <__gedf2+0x54>
 8001866:	429a      	cmp	r2, r3
 8001868:	dc0a      	bgt.n	8001880 <__gedf2+0xc0>
 800186a:	dbe7      	blt.n	800183c <__gedf2+0x7c>
 800186c:	454f      	cmp	r7, r9
 800186e:	d8d1      	bhi.n	8001814 <__gedf2+0x54>
 8001870:	d010      	beq.n	8001894 <__gedf2+0xd4>
 8001872:	2000      	movs	r0, #0
 8001874:	454f      	cmp	r7, r9
 8001876:	d2d1      	bcs.n	800181c <__gedf2+0x5c>
 8001878:	2900      	cmp	r1, #0
 800187a:	d0e1      	beq.n	8001840 <__gedf2+0x80>
 800187c:	0008      	movs	r0, r1
 800187e:	e7cd      	b.n	800181c <__gedf2+0x5c>
 8001880:	4243      	negs	r3, r0
 8001882:	4158      	adcs	r0, r3
 8001884:	2302      	movs	r3, #2
 8001886:	4240      	negs	r0, r0
 8001888:	4018      	ands	r0, r3
 800188a:	3801      	subs	r0, #1
 800188c:	e7c6      	b.n	800181c <__gedf2+0x5c>
 800188e:	2002      	movs	r0, #2
 8001890:	4240      	negs	r0, r0
 8001892:	e7c3      	b.n	800181c <__gedf2+0x5c>
 8001894:	45c4      	cmp	ip, r8
 8001896:	d8bd      	bhi.n	8001814 <__gedf2+0x54>
 8001898:	2000      	movs	r0, #0
 800189a:	45c4      	cmp	ip, r8
 800189c:	d2be      	bcs.n	800181c <__gedf2+0x5c>
 800189e:	e7eb      	b.n	8001878 <__gedf2+0xb8>
 80018a0:	000007ff 	.word	0x000007ff

080018a4 <__ledf2>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	464e      	mov	r6, r9
 80018a8:	4645      	mov	r5, r8
 80018aa:	4657      	mov	r7, sl
 80018ac:	46de      	mov	lr, fp
 80018ae:	0004      	movs	r4, r0
 80018b0:	0018      	movs	r0, r3
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	0016      	movs	r6, r2
 80018b6:	031b      	lsls	r3, r3, #12
 80018b8:	0b1b      	lsrs	r3, r3, #12
 80018ba:	4d31      	ldr	r5, [pc, #196]	; (8001980 <__ledf2+0xdc>)
 80018bc:	030f      	lsls	r7, r1, #12
 80018be:	004a      	lsls	r2, r1, #1
 80018c0:	4699      	mov	r9, r3
 80018c2:	0043      	lsls	r3, r0, #1
 80018c4:	46a4      	mov	ip, r4
 80018c6:	46b0      	mov	r8, r6
 80018c8:	0b3f      	lsrs	r7, r7, #12
 80018ca:	0d52      	lsrs	r2, r2, #21
 80018cc:	0fc9      	lsrs	r1, r1, #31
 80018ce:	0d5b      	lsrs	r3, r3, #21
 80018d0:	0fc0      	lsrs	r0, r0, #31
 80018d2:	42aa      	cmp	r2, r5
 80018d4:	d011      	beq.n	80018fa <__ledf2+0x56>
 80018d6:	42ab      	cmp	r3, r5
 80018d8:	d014      	beq.n	8001904 <__ledf2+0x60>
 80018da:	2a00      	cmp	r2, #0
 80018dc:	d12f      	bne.n	800193e <__ledf2+0x9a>
 80018de:	433c      	orrs	r4, r7
 80018e0:	46a3      	mov	fp, r4
 80018e2:	4265      	negs	r5, r4
 80018e4:	4165      	adcs	r5, r4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d114      	bne.n	8001914 <__ledf2+0x70>
 80018ea:	464c      	mov	r4, r9
 80018ec:	4326      	orrs	r6, r4
 80018ee:	d111      	bne.n	8001914 <__ledf2+0x70>
 80018f0:	465b      	mov	r3, fp
 80018f2:	2000      	movs	r0, #0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d017      	beq.n	8001928 <__ledf2+0x84>
 80018f8:	e010      	b.n	800191c <__ledf2+0x78>
 80018fa:	003d      	movs	r5, r7
 80018fc:	4325      	orrs	r5, r4
 80018fe:	d112      	bne.n	8001926 <__ledf2+0x82>
 8001900:	4293      	cmp	r3, r2
 8001902:	d11c      	bne.n	800193e <__ledf2+0x9a>
 8001904:	464d      	mov	r5, r9
 8001906:	432e      	orrs	r6, r5
 8001908:	d10d      	bne.n	8001926 <__ledf2+0x82>
 800190a:	2a00      	cmp	r2, #0
 800190c:	d104      	bne.n	8001918 <__ledf2+0x74>
 800190e:	433c      	orrs	r4, r7
 8001910:	4265      	negs	r5, r4
 8001912:	4165      	adcs	r5, r4
 8001914:	2d00      	cmp	r5, #0
 8001916:	d10d      	bne.n	8001934 <__ledf2+0x90>
 8001918:	4281      	cmp	r1, r0
 800191a:	d016      	beq.n	800194a <__ledf2+0xa6>
 800191c:	2002      	movs	r0, #2
 800191e:	3901      	subs	r1, #1
 8001920:	4008      	ands	r0, r1
 8001922:	3801      	subs	r0, #1
 8001924:	e000      	b.n	8001928 <__ledf2+0x84>
 8001926:	2002      	movs	r0, #2
 8001928:	bcf0      	pop	{r4, r5, r6, r7}
 800192a:	46bb      	mov	fp, r7
 800192c:	46b2      	mov	sl, r6
 800192e:	46a9      	mov	r9, r5
 8001930:	46a0      	mov	r8, r4
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001934:	2800      	cmp	r0, #0
 8001936:	d1f7      	bne.n	8001928 <__ledf2+0x84>
 8001938:	2001      	movs	r0, #1
 800193a:	4240      	negs	r0, r0
 800193c:	e7f4      	b.n	8001928 <__ledf2+0x84>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ea      	bne.n	8001918 <__ledf2+0x74>
 8001942:	464c      	mov	r4, r9
 8001944:	4326      	orrs	r6, r4
 8001946:	d1e7      	bne.n	8001918 <__ledf2+0x74>
 8001948:	e7e8      	b.n	800191c <__ledf2+0x78>
 800194a:	429a      	cmp	r2, r3
 800194c:	dd06      	ble.n	800195c <__ledf2+0xb8>
 800194e:	4243      	negs	r3, r0
 8001950:	4158      	adcs	r0, r3
 8001952:	2302      	movs	r3, #2
 8001954:	4240      	negs	r0, r0
 8001956:	4018      	ands	r0, r3
 8001958:	3801      	subs	r0, #1
 800195a:	e7e5      	b.n	8001928 <__ledf2+0x84>
 800195c:	429a      	cmp	r2, r3
 800195e:	dbe9      	blt.n	8001934 <__ledf2+0x90>
 8001960:	454f      	cmp	r7, r9
 8001962:	d8db      	bhi.n	800191c <__ledf2+0x78>
 8001964:	d006      	beq.n	8001974 <__ledf2+0xd0>
 8001966:	2000      	movs	r0, #0
 8001968:	454f      	cmp	r7, r9
 800196a:	d2dd      	bcs.n	8001928 <__ledf2+0x84>
 800196c:	2900      	cmp	r1, #0
 800196e:	d0e3      	beq.n	8001938 <__ledf2+0x94>
 8001970:	0008      	movs	r0, r1
 8001972:	e7d9      	b.n	8001928 <__ledf2+0x84>
 8001974:	45c4      	cmp	ip, r8
 8001976:	d8d1      	bhi.n	800191c <__ledf2+0x78>
 8001978:	2000      	movs	r0, #0
 800197a:	45c4      	cmp	ip, r8
 800197c:	d2d4      	bcs.n	8001928 <__ledf2+0x84>
 800197e:	e7f5      	b.n	800196c <__ledf2+0xc8>
 8001980:	000007ff 	.word	0x000007ff

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f000 fa54 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 f874 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f000 f93a 	bl	8001c08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001994:	f000 f8ce 	bl	8001b34 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <main+0xd0>)
 800199a:	0018      	movs	r0, r3
 800199c:	f001 f9d2 	bl	8002d44 <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //iniciando conversão
	  HAL_ADC_Start(&hadc1);
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <main+0xd0>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 fe00 	bl	80025a8 <HAL_ADC_Start>

	  //tempo de espera para completar ciclo
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <main+0xd0>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 fe49 	bl	8002644 <HAL_ADC_PollForConversion>

	  pot = HAL_ADC_GetValue(&hadc1);
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <main+0xd0>)
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 fed9 	bl	800276c <HAL_ADC_GetValue>
 80019ba:	0003      	movs	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <main+0xd4>)
 80019c0:	801a      	strh	r2, [r3, #0]

	  //tempo de espera para completar ciclo
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <main+0xd0>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 fe3c 	bl	8002644 <HAL_ADC_PollForConversion>

	  volt = 3.3 / 4095.0 * pot;
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <main+0xd4>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff fd5d 	bl	8001490 <__aeabi_i2d>
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <main+0xd8>)
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <main+0xdc>)
 80019da:	f7fe ff25 	bl	8000828 <__aeabi_dmul>
 80019de:	0002      	movs	r2, r0
 80019e0:	000b      	movs	r3, r1
 80019e2:	0010      	movs	r0, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	f7ff fdcb 	bl	8001580 <__aeabi_d2f>
 80019ea:	1c02      	adds	r2, r0, #0
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <main+0xe0>)
 80019ee:	601a      	str	r2, [r3, #0]

	  r2=(volt/(3.3-volt))*r1;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <main+0xe0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1c18      	adds	r0, r3, #0
 80019f6:	f7ff fd7b 	bl	80014f0 <__aeabi_f2d>
 80019fa:	0004      	movs	r4, r0
 80019fc:	000d      	movs	r5, r1
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <main+0xe0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1c18      	adds	r0, r3, #0
 8001a04:	f7ff fd74 	bl	80014f0 <__aeabi_f2d>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	000b      	movs	r3, r1
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <main+0xe4>)
 8001a0e:	4917      	ldr	r1, [pc, #92]	; (8001a6c <main+0xe8>)
 8001a10:	f7ff f976 	bl	8000d00 <__aeabi_dsub>
 8001a14:	0002      	movs	r2, r0
 8001a16:	000b      	movs	r3, r1
 8001a18:	0020      	movs	r0, r4
 8001a1a:	0029      	movs	r1, r5
 8001a1c:	f7fe fc1c 	bl	8000258 <__aeabi_ddiv>
 8001a20:	0002      	movs	r2, r0
 8001a22:	000b      	movs	r3, r1
 8001a24:	0014      	movs	r4, r2
 8001a26:	001d      	movs	r5, r3
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <main+0xec>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fd2f 	bl	8001490 <__aeabi_i2d>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	0020      	movs	r0, r4
 8001a38:	0029      	movs	r1, r5
 8001a3a:	f7fe fef5 	bl	8000828 <__aeabi_dmul>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	000b      	movs	r3, r1
 8001a42:	0010      	movs	r0, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	f7fe fbe9 	bl	800021c <__aeabi_d2uiz>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <main+0xf0>)
 8001a50:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8001a52:	e7a5      	b.n	80019a0 <main+0x1c>
 8001a54:	2000002c 	.word	0x2000002c
 8001a58:	20000090 	.word	0x20000090
 8001a5c:	e734d9b4 	.word	0xe734d9b4
 8001a60:	3f4a680c 	.word	0x3f4a680c
 8001a64:	20000094 	.word	0x20000094
 8001a68:	66666666 	.word	0x66666666
 8001a6c:	400a6666 	.word	0x400a6666
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000092 	.word	0x20000092

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b095      	sub	sp, #84	; 0x54
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	2414      	movs	r4, #20
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	0018      	movs	r0, r3
 8001a84:	233c      	movs	r3, #60	; 0x3c
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f002 fbab 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	0018      	movs	r0, r3
 8001a92:	2310      	movs	r3, #16
 8001a94:	001a      	movs	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f002 fba4 	bl	80041e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f001 fc0f 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001ab4:	0021      	movs	r1, r4
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2202      	movs	r2, #2
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0292      	lsls	r2, r2, #10
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	0492      	lsls	r2, r2, #18
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0592      	lsls	r2, r2, #22
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	0018      	movs	r0, r3
 8001af6:	f001 fc25 	bl	8003344 <HAL_RCC_OscConfig>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001afe:	f000 f8c9 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f001 ff76 	bl	8003a10 <HAL_RCC_ClockConfig>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b28:	f000 f8b4 	bl	8001c94 <Error_Handler>
  }
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b015      	add	sp, #84	; 0x54
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	230c      	movs	r3, #12
 8001b40:	001a      	movs	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	f002 fb4e 	bl	80041e4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b4a:	4a2e      	ldr	r2, [pc, #184]	; (8001c04 <MX_ADC1_Init+0xd0>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	05d2      	lsls	r2, r2, #23
 8001b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b88:	2220      	movs	r2, #32
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001b9c:	222c      	movs	r2, #44	; 0x2c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001baa:	2204      	movs	r2, #4
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001bb6:	223c      	movs	r2, #60	; 0x3c
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fb11 	bl	80021ec <HAL_ADC_Init>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001bce:	f000 f861 	bl	8001c94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be4:	1d3a      	adds	r2, r7, #4
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_ADC1_Init+0xcc>)
 8001be8:	0011      	movs	r1, r2
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 fdca 	bl	8002784 <HAL_ADC_ConfigChannel>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001bf4:	f000 f84e 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	40012400 	.word	0x40012400

08001c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	240c      	movs	r4, #12
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	0018      	movs	r0, r3
 8001c14:	2314      	movs	r3, #20
 8001c16:	001a      	movs	r2, r3
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f002 fae3 	bl	80041e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c24:	2104      	movs	r1, #4
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_GPIO_Init+0x84>)
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED02_Pin|LED03_Pin|LED01_Pin, GPIO_PIN_RESET);
 8001c4e:	23e0      	movs	r3, #224	; 0xe0
 8001c50:	015b      	lsls	r3, r3, #5
 8001c52:	480f      	ldr	r0, [pc, #60]	; (8001c90 <MX_GPIO_Init+0x88>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	0019      	movs	r1, r3
 8001c58:	f001 fb16 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED02_Pin LED03_Pin LED01_Pin */
  GPIO_InitStruct.Pin = LED02_Pin|LED03_Pin|LED01_Pin;
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	22e0      	movs	r2, #224	; 0xe0
 8001c60:	0152      	lsls	r2, r2, #5
 8001c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2201      	movs	r2, #1
 8001c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <MX_GPIO_Init+0x88>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f001 f997 	bl	8002fb0 <HAL_GPIO_Init>

}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b009      	add	sp, #36	; 0x24
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	50000800 	.word	0x50000800

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_MspInit+0x4c>)
 8001ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_MspInit+0x4c>)
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_MspInit+0x4c>)
 8001cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_MspInit+0x4c>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0549      	lsls	r1, r1, #21
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_MspInit+0x4c>)
 8001cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	055b      	lsls	r3, r3, #21
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f92e 	bl	8001f40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b09d      	sub	sp, #116	; 0x74
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	235c      	movs	r3, #92	; 0x5c
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	2314      	movs	r3, #20
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f002 fa6e 	bl	80041e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d08:	2410      	movs	r4, #16
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	234c      	movs	r3, #76	; 0x4c
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f002 fa66 	bl	80041e4 <memset>
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_ADC_MspInit+0xb0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d139      	bne.n	8001d96 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	01d2      	lsls	r2, r2, #7
 8001d28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	0018      	movs	r0, r3
 8001d34:	f001 fff6 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d3c:	f7ff ffaa 	bl	8001c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0349      	lsls	r1, r1, #13
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	035b      	lsls	r3, r3, #13
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_ADC_MspInit+0xb4>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d74:	215c      	movs	r1, #92	; 0x5c
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	187a      	adds	r2, r7, r1
 8001d8a:	23a0      	movs	r3, #160	; 0xa0
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	0011      	movs	r1, r2
 8001d90:	0018      	movs	r0, r3
 8001d92:	f001 f90d 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b01d      	add	sp, #116	; 0x74
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40012400 	.word	0x40012400
 8001da4:	40021000 	.word	0x40021000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 f89c 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001de2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de4:	f7ff fff7 	bl	8001dd6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	; (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e0e:	f002 f9c5 	bl	800419c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e12:	f7ff fdb7 	bl	8001984 <main>

08001e16 <LoopForever>:

LoopForever:
  b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
  ldr   r0, =_estack
 8001e18:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e24:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8001e28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e2c:	2000009c 	.word	0x2000009c

08001e30 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_COMP_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_Init+0x3c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Init+0x3c>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0049      	lsls	r1, r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f000 f810 	bl	8001e74 <HAL_InitTick>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e001      	b.n	8001e64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff ff1e 	bl	8001ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	781b      	ldrb	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_InitTick+0x88>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d02b      	beq.n	8001ee4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_InitTick+0x8c>)
 8001e8e:	681c      	ldr	r4, [r3, #0]
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_InitTick+0x88>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	0019      	movs	r1, r3
 8001e96:	23fa      	movs	r3, #250	; 0xfa
 8001e98:	0098      	lsls	r0, r3, #2
 8001e9a:	f7fe f933 	bl	8000104 <__udivsi3>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	0020      	movs	r0, r4
 8001ea4:	f7fe f92e 	bl	8000104 <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f001 f873 	bl	8002f96 <HAL_SYSTICK_Config>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d112      	bne.n	8001eda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d80a      	bhi.n	8001ed0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f001 f852 	bl	8002f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_InitTick+0x90>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e00d      	b.n	8001eec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e008      	b.n	8001eec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eda:	230f      	movs	r3, #15
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e003      	b.n	8001eec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001eec:	230f      	movs	r3, #15
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b005      	add	sp, #20
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000004 	.word	0x20000004
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x1c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x20>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	18d2      	adds	r2, r2, r3
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_IncTick+0x20>)
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	20000098 	.word	0x20000098

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b02      	ldr	r3, [pc, #8]	; (8001f3c <HAL_GetTick+0x10>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	20000098 	.word	0x20000098

08001f40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40010000 	.word	0x40010000
 8001f68:	fffff9ff 	.word	0xfffff9ff

08001f6c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	fe3fffff 	.word	0xfe3fffff

08001f94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	23e0      	movs	r3, #224	; 0xe0
 8001fa2:	045b      	lsls	r3, r3, #17
 8001fa4:	4013      	ands	r3, r2
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}

08001fae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	2107      	movs	r1, #7
 8001fc6:	4091      	lsls	r1, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	43d2      	mvns	r2, r2
 8001fcc:	401a      	ands	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4099      	lsls	r1, r3
 8001fd8:	000b      	movs	r3, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	211f      	movs	r1, #31
 800201e:	400a      	ands	r2, r1
 8002020:	210f      	movs	r1, #15
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	43d2      	mvns	r2, r2
 8002028:	401a      	ands	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	210f      	movs	r1, #15
 8002030:	4019      	ands	r1, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	201f      	movs	r0, #31
 8002036:	4003      	ands	r3, r0
 8002038:	4099      	lsls	r1, r3
 800203a:	000b      	movs	r3, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}

0800204a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	035b      	lsls	r3, r3, #13
 800205c:	0b5b      	lsrs	r3, r3, #13
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	0352      	lsls	r2, r2, #13
 800207e:	0b52      	lsrs	r2, r2, #13
 8002080:	43d2      	mvns	r2, r2
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	0212      	lsls	r2, r2, #8
 80020a4:	43d2      	mvns	r2, r2
 80020a6:	401a      	ands	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	400b      	ands	r3, r1
 80020b0:	4904      	ldr	r1, [pc, #16]	; (80020c4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	07ffff00 	.word	0x07ffff00

080020c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <LL_ADC_EnableInternalRegulator+0x24>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	0552      	lsls	r2, r2, #21
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	6fffffe8 	.word	0x6fffffe8

080020f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	401a      	ands	r2, r3
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	055b      	lsls	r3, r3, #21
 8002106:	429a      	cmp	r2, r3
 8002108:	d101      	bne.n	800210e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <LL_ADC_Enable+0x20>)
 8002126:	4013      	ands	r3, r2
 8002128:	2201      	movs	r2, #1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	7fffffe8 	.word	0x7fffffe8

0800213c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <LL_ADC_Disable+0x20>)
 800214a:	4013      	ands	r3, r2
 800214c:	2202      	movs	r2, #2
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}
 800215c:	7fffffe8 	.word	0x7fffffe8

08002160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <LL_ADC_IsEnabled+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_IsEnabled+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}

08002182 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d101      	bne.n	800219a <LL_ADC_IsDisableOngoing+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsDisableOngoing+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <LL_ADC_REG_StartConversion+0x20>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	2204      	movs	r2, #4
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	7fffffe8 	.word	0x7fffffe8

080021c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2204      	movs	r2, #4
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d101      	bne.n	80021e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f4:	231f      	movs	r3, #31
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1b1      	b.n	8002576 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff fd67 	bl	8001cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2254      	movs	r2, #84	; 0x54
 800222c:	2100      	movs	r1, #0
 800222e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ff5b 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d115      	bne.n	800226a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff ff40 	bl	80020c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002248:	4bcd      	ldr	r3, [pc, #820]	; (8002580 <HAL_ADC_Init+0x394>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	49cd      	ldr	r1, [pc, #820]	; (8002584 <HAL_ADC_Init+0x398>)
 800224e:	0018      	movs	r0, r3
 8002250:	f7fd ff58 	bl	8000104 <__udivsi3>
 8002254:	0003      	movs	r3, r0
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800225c:	e002      	b.n	8002264 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff ff3e 	bl	80020f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d10f      	bne.n	8002298 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	2210      	movs	r2, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2201      	movs	r2, #1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002290:	231f      	movs	r3, #31
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff ff93 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 80022a2:	0003      	movs	r3, r0
 80022a4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	2210      	movs	r2, #16
 80022ac:	4013      	ands	r3, r2
 80022ae:	d000      	beq.n	80022b2 <HAL_ADC_Init+0xc6>
 80022b0:	e154      	b.n	800255c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d000      	beq.n	80022ba <HAL_ADC_Init+0xce>
 80022b8:	e150      	b.n	800255c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4ab2      	ldr	r2, [pc, #712]	; (8002588 <HAL_ADC_Init+0x39c>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	2202      	movs	r2, #2
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff ff46 	bl	8002160 <LL_ADC_IsEnabled>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d156      	bne.n	8002386 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2218      	movs	r2, #24
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0f9b      	lsrs	r3, r3, #30
 80022f6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022fc:	4313      	orrs	r3, r2
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223c      	movs	r2, #60	; 0x3c
 8002308:	5c9b      	ldrb	r3, [r3, r2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d111      	bne.n	8002332 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0f9b      	lsrs	r3, r3, #30
 8002314:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800231a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002320:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002326:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	2201      	movs	r2, #1
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_ADC_Init+0x3a0>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	430a      	orrs	r2, r1
 8002346:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	23c0      	movs	r3, #192	; 0xc0
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	429a      	cmp	r2, r3
 8002352:	d018      	beq.n	8002386 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	429a      	cmp	r2, r3
 800235e:	d012      	beq.n	8002386 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	429a      	cmp	r2, r3
 800236a:	d00c      	beq.n	8002386 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_ADC_Init+0x3a4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a88      	ldr	r2, [pc, #544]	; (8002594 <HAL_ADC_Init+0x3a8>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23f0      	movs	r3, #240	; 0xf0
 800237c:	039b      	lsls	r3, r3, #14
 800237e:	401a      	ands	r2, r3
 8002380:	4b83      	ldr	r3, [pc, #524]	; (8002590 <HAL_ADC_Init+0x3a4>)
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7e1b      	ldrb	r3, [r3, #24]
 800238a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e5b      	ldrb	r3, [r3, #25]
 8002390:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002392:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e9b      	ldrb	r3, [r3, #26]
 8002398:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800239a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_Init+0x1be>
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	e000      	b.n	80023ac <HAL_ADC_Init+0x1c0>
 80023aa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023ac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023b2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da04      	bge.n	80023c6 <HAL_ADC_Init+0x1da>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	e001      	b.n	80023ca <HAL_ADC_Init+0x1de>
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80023ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	5c5b      	ldrb	r3, [r3, r1]
 80023d2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023d4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d115      	bne.n	8002412 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7e9b      	ldrb	r3, [r3, #26]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0252      	lsls	r2, r2, #9
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e00b      	b.n	8002412 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	2220      	movs	r2, #32
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2201      	movs	r2, #1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	23e0      	movs	r3, #224	; 0xe0
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002428:	4313      	orrs	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_ADC_Init+0x3ac>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4a53      	ldr	r2, [pc, #332]	; (800259c <HAL_ADC_Init+0x3b0>)
 800244e:	4013      	ands	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	430a      	orrs	r2, r1
 800245a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	001a      	movs	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	f7ff fda1 	bl	8001fae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	494a      	ldr	r1, [pc, #296]	; (80025a0 <HAL_ADC_Init+0x3b4>)
 8002476:	001a      	movs	r2, r3
 8002478:	f7ff fd99 	bl	8001fae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2110      	movs	r1, #16
 8002490:	4249      	negs	r1, r1
 8002492:	430a      	orrs	r2, r1
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
 8002496:	e03a      	b.n	800250e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	039b      	lsls	r3, r3, #14
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d134      	bne.n	800250e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e00c      	b.n	80024c4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	40da      	lsrs	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	220f      	movs	r2, #15
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	d006      	beq.n	80024cc <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3301      	adds	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b07      	cmp	r3, #7
 80024c8:	d9ef      	bls.n	80024aa <HAL_ADC_Init+0x2be>
 80024ca:	e000      	b.n	80024ce <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80024cc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2110      	movs	r1, #16
 80024e0:	4249      	negs	r1, r1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
 80024e6:	e012      	b.n	800250e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	221c      	movs	r2, #28
 80024f8:	4013      	ands	r3, r2
 80024fa:	2210      	movs	r2, #16
 80024fc:	4252      	negs	r2, r2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0011      	movs	r1, r2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_ADC_Init+0x3b8>)
 8002516:	4013      	ands	r3, r2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	429a      	cmp	r2, r3
 800251c:	d10b      	bne.n	8002536 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	2203      	movs	r2, #3
 800252a:	4393      	bics	r3, r2
 800252c:	2201      	movs	r2, #1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002534:	e01c      	b.n	8002570 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	2212      	movs	r2, #18
 800253c:	4393      	bics	r3, r2
 800253e:	2210      	movs	r2, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2201      	movs	r2, #1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002552:	231f      	movs	r3, #31
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800255a:	e009      	b.n	8002570 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	2210      	movs	r2, #16
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002568:	231f      	movs	r3, #31
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002570:	231f      	movs	r3, #31
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b008      	add	sp, #32
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	20000004 	.word	0x20000004
 8002584:	00030d40 	.word	0x00030d40
 8002588:	fffffefd 	.word	0xfffffefd
 800258c:	1ffffc02 	.word	0x1ffffc02
 8002590:	40012708 	.word	0x40012708
 8002594:	ffc3ffff 	.word	0xffc3ffff
 8002598:	fffe0219 	.word	0xfffe0219
 800259c:	dffffc02 	.word	0xdffffc02
 80025a0:	07ffff04 	.word	0x07ffff04
 80025a4:	833fffe7 	.word	0x833fffe7

080025a8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fe07 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d135      	bne.n	800262a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2254      	movs	r2, #84	; 0x54
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_Start+0x24>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e035      	b.n	8002638 <HAL_ADC_Start+0x90>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2254      	movs	r2, #84	; 0x54
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025d4:	250f      	movs	r5, #15
 80025d6:	197c      	adds	r4, r7, r5
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 faaa 	bl	8002b34 <ADC_Enable>
 80025e0:	0003      	movs	r3, r0
 80025e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d119      	bne.n	8002620 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_ADC_Start+0x98>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	0052      	lsls	r2, r2, #1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	221c      	movs	r2, #28
 800260a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2254      	movs	r2, #84	; 0x54
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff fdc3 	bl	80021a4 <LL_ADC_REG_StartConversion>
 800261e:	e008      	b.n	8002632 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2254      	movs	r2, #84	; 0x54
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]
 8002628:	e003      	b.n	8002632 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800262a:	230f      	movs	r3, #15
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	781b      	ldrb	r3, [r3, #0]
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bdb0      	pop	{r4, r5, r7, pc}
 8002640:	fffff0fe 	.word	0xfffff0fe

08002644 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b08      	cmp	r3, #8
 8002654:	d102      	bne.n	800265c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002656:	2308      	movs	r3, #8
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e00f      	b.n	800267c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d007      	beq.n	8002678 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	2220      	movs	r2, #32
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e072      	b.n	800275e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002678:	2304      	movs	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800267c:	f7ff fc56 	bl	8001f2c <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002684:	e01f      	b.n	80026c6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	d01c      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800268c:	f7ff fc4e 	bl	8001f2c <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d302      	bcc.n	80026a2 <HAL_ADC_PollForConversion+0x5e>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d111      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	d10b      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	2204      	movs	r2, #4
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2254      	movs	r2, #84	; 0x54
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04b      	b.n	800275e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	d0d9      	beq.n	8002686 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff fc7f 	bl	8001fe8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d02e      	beq.n	800274c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7e9b      	ldrb	r3, [r3, #26]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d12a      	bne.n	800274c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	4013      	ands	r3, r2
 8002700:	2b08      	cmp	r3, #8
 8002702:	d123      	bne.n	800274c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff fd5d 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d110      	bne.n	8002734 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	210c      	movs	r1, #12
 800271e:	438a      	bics	r2, r1
 8002720:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_ADC_PollForConversion+0x124>)
 8002728:	4013      	ands	r3, r2
 800272a:	2201      	movs	r2, #1
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	659a      	str	r2, [r3, #88]	; 0x58
 8002732:	e00b      	b.n	800274c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	2220      	movs	r2, #32
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7e1b      	ldrb	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	220c      	movs	r2, #12
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	fffffefe 	.word	0xfffffefe

0800276c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278e:	2317      	movs	r3, #23
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2254      	movs	r2, #84	; 0x54
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x24>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e1c0      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x3a6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2254      	movs	r2, #84	; 0x54
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fd07 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d000      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x3c>
 80027be:	e1a3      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d100      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x46>
 80027c8:	e143      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027da:	4ac1      	ldr	r2, [pc, #772]	; (8002ae0 <HAL_ADC_ConfigChannel+0x35c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d108      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0019      	movs	r1, r3
 80027ea:	0010      	movs	r0, r2
 80027ec:	f7ff fc2d 	bl	800204a <LL_ADC_REG_SetSequencerChAdd>
 80027f0:	e0c9      	b.n	8002986 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	211f      	movs	r1, #31
 80027fc:	400b      	ands	r3, r1
 80027fe:	210f      	movs	r1, #15
 8002800:	4099      	lsls	r1, r3
 8002802:	000b      	movs	r3, r1
 8002804:	43db      	mvns	r3, r3
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	035b      	lsls	r3, r3, #13
 8002810:	0b5b      	lsrs	r3, r3, #13
 8002812:	d105      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x9c>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	221f      	movs	r2, #31
 800281c:	4013      	ands	r3, r2
 800281e:	e098      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d000      	beq.n	800282c <HAL_ADC_ConfigChannel+0xa8>
 800282a:	e091      	b.n	8002950 <HAL_ADC_ConfigChannel+0x1cc>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d000      	beq.n	8002838 <HAL_ADC_ConfigChannel+0xb4>
 8002836:	e089      	b.n	800294c <HAL_ADC_ConfigChannel+0x1c8>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	4013      	ands	r3, r2
 8002840:	d000      	beq.n	8002844 <HAL_ADC_ConfigChannel+0xc0>
 8002842:	e081      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1c4>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2208      	movs	r2, #8
 800284a:	4013      	ands	r3, r2
 800284c:	d000      	beq.n	8002850 <HAL_ADC_ConfigChannel+0xcc>
 800284e:	e079      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1c0>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d000      	beq.n	800285c <HAL_ADC_ConfigChannel+0xd8>
 800285a:	e071      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1bc>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2220      	movs	r2, #32
 8002862:	4013      	ands	r3, r2
 8002864:	d000      	beq.n	8002868 <HAL_ADC_ConfigChannel+0xe4>
 8002866:	e069      	b.n	800293c <HAL_ADC_ConfigChannel+0x1b8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	4013      	ands	r3, r2
 8002870:	d000      	beq.n	8002874 <HAL_ADC_ConfigChannel+0xf0>
 8002872:	e061      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1b4>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	4013      	ands	r3, r2
 800287c:	d000      	beq.n	8002880 <HAL_ADC_ConfigChannel+0xfc>
 800287e:	e059      	b.n	8002934 <HAL_ADC_ConfigChannel+0x1b0>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4013      	ands	r3, r2
 800288a:	d151      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1ac>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4013      	ands	r3, r2
 8002896:	d149      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1a8>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	d141      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1a4>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d139      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1a0>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	4013      	ands	r3, r2
 80028ba:	d131      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x19c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	4013      	ands	r3, r2
 80028c6:	d129      	bne.n	800291c <HAL_ADC_ConfigChannel+0x198>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	01db      	lsls	r3, r3, #7
 80028d0:	4013      	ands	r3, r2
 80028d2:	d121      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x194>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	4013      	ands	r3, r2
 80028de:	d119      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x190>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	4013      	ands	r3, r2
 80028ea:	d111      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x18c>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	d109      	bne.n	800290c <HAL_ADC_ConfigChannel+0x188>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	02db      	lsls	r3, r3, #11
 8002900:	4013      	ands	r3, r2
 8002902:	d001      	beq.n	8002908 <HAL_ADC_ConfigChannel+0x184>
 8002904:	2312      	movs	r3, #18
 8002906:	e024      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002908:	2300      	movs	r3, #0
 800290a:	e022      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 800290c:	2311      	movs	r3, #17
 800290e:	e020      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002910:	2310      	movs	r3, #16
 8002912:	e01e      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002914:	230f      	movs	r3, #15
 8002916:	e01c      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002918:	230e      	movs	r3, #14
 800291a:	e01a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 800291c:	230d      	movs	r3, #13
 800291e:	e018      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002920:	230c      	movs	r3, #12
 8002922:	e016      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002924:	230b      	movs	r3, #11
 8002926:	e014      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002928:	230a      	movs	r3, #10
 800292a:	e012      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 800292c:	2309      	movs	r3, #9
 800292e:	e010      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002930:	2308      	movs	r3, #8
 8002932:	e00e      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002934:	2307      	movs	r3, #7
 8002936:	e00c      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002938:	2306      	movs	r3, #6
 800293a:	e00a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 800293c:	2305      	movs	r3, #5
 800293e:	e008      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002940:	2304      	movs	r3, #4
 8002942:	e006      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002944:	2303      	movs	r3, #3
 8002946:	e004      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002948:	2302      	movs	r3, #2
 800294a:	e002      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1ce>
 8002950:	2300      	movs	r3, #0
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6852      	ldr	r2, [r2, #4]
 8002956:	201f      	movs	r0, #31
 8002958:	4002      	ands	r2, r0
 800295a:	4093      	lsls	r3, r2
 800295c:	000a      	movs	r2, r1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	429a      	cmp	r2, r3
 8002972:	d808      	bhi.n	8002986 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	001a      	movs	r2, r3
 8002982:	f7ff fb42 	bl	800200a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	001a      	movs	r2, r3
 8002994:	f7ff fb7c 	bl	8002090 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db00      	blt.n	80029a2 <HAL_ADC_ConfigChannel+0x21e>
 80029a0:	e0bc      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a2:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff faf5 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 80029aa:	0003      	movs	r3, r0
 80029ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <HAL_ADC_ConfigChannel+0x364>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d122      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029c0:	d11d      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	0412      	lsls	r2, r2, #16
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a46      	ldr	r2, [pc, #280]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7ff facc 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d4:	4b45      	ldr	r3, [pc, #276]	; (8002aec <HAL_ADC_ConfigChannel+0x368>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4945      	ldr	r1, [pc, #276]	; (8002af0 <HAL_ADC_ConfigChannel+0x36c>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fd fb92 	bl	8000104 <__udivsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	0013      	movs	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ee:	e002      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029fc:	e08e      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	; (8002af4 <HAL_ADC_ConfigChannel+0x370>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10e      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x2a2>
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	045b      	lsls	r3, r3, #17
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d109      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2280      	movs	r2, #128	; 0x80
 8002a16:	0452      	lsls	r2, r2, #17
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f7ff faa4 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
 8002a24:	e07a      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a33      	ldr	r2, [pc, #204]	; (8002af8 <HAL_ADC_ConfigChannel+0x374>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d000      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x2ae>
 8002a30:	e074      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	03db      	lsls	r3, r3, #15
 8002a38:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a3a:	d000      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x2ba>
 8002a3c:	e06e      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	03d2      	lsls	r2, r2, #15
 8002a44:	4313      	orrs	r3, r2
 8002a46:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002a48:	0019      	movs	r1, r3
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	f7ff fa8e 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
 8002a50:	e064      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d004      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_ADC_ConfigChannel+0x35c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d107      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0019      	movs	r1, r3
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7ff fafa 	bl	800206c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da4d      	bge.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff fa86 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_ADC_ConfigChannel+0x364>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_ADC_ConfigChannel+0x378>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f7ff fa63 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
 8002aa6:	e039      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_ADC_ConfigChannel+0x370>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_ADC_ConfigChannel+0x37c>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f7ff fa55 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
 8002ac2:	e02b      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <HAL_ADC_ConfigChannel+0x374>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d126      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_ADC_ConfigChannel+0x380>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_ADC_ConfigChannel+0x360>)
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7ff fa47 	bl	8001f6c <LL_ADC_SetCommonPathInternalCh>
 8002ade:	e01d      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x398>
 8002ae0:	80000004 	.word	0x80000004
 8002ae4:	40012708 	.word	0x40012708
 8002ae8:	b0001000 	.word	0xb0001000
 8002aec:	20000004 	.word	0x20000004
 8002af0:	00030d40 	.word	0x00030d40
 8002af4:	b8004000 	.word	0xb8004000
 8002af8:	b4002000 	.word	0xb4002000
 8002afc:	ff7fffff 	.word	0xff7fffff
 8002b00:	feffffff 	.word	0xfeffffff
 8002b04:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b14:	2317      	movs	r3, #23
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2254      	movs	r2, #84	; 0x54
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b24:	2317      	movs	r3, #23
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)

08002b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff fb0b 	bl	8002160 <LL_ADC_IsEnabled>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d000      	beq.n	8002b50 <ADC_Enable+0x1c>
 8002b4e:	e069      	b.n	8002c24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <ADC_Enable+0xfc>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	2210      	movs	r2, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e056      	b.n	8002c26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff facb 	bl	8002118 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <ADC_Enable+0x100>)
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff fa05 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00f      	beq.n	8002bb4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <ADC_Enable+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4928      	ldr	r1, [pc, #160]	; (8002c3c <ADC_Enable+0x108>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fab2 	bl	8000104 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba6:	e002      	b.n	8002bae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e5b      	ldrb	r3, [r3, #25]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d033      	beq.n	8002c24 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002bbc:	f7ff f9b6 	bl	8001f2c <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc4:	e027      	b.n	8002c16 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff fac8 	bl	8002160 <LL_ADC_IsEnabled>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d104      	bne.n	8002bde <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fa9d 	bl	8002118 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bde:	f7ff f9a5 	bl	8001f2c <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d914      	bls.n	8002c16 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d00d      	beq.n	8002c16 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	2210      	movs	r2, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d1d0      	bne.n	8002bc6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	80000017 	.word	0x80000017
 8002c34:	40012708 	.word	0x40012708
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	00030d40 	.word	0x00030d40

08002c40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fa98 	bl	8002182 <LL_ADC_IsDisableOngoing>
 8002c52:	0003      	movs	r3, r0
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff fa80 	bl	8002160 <LL_ADC_IsEnabled>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d046      	beq.n	8002cf2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d143      	bne.n	8002cf2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2205      	movs	r2, #5
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10d      	bne.n	8002c94 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fa5d 	bl	800213c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2203      	movs	r2, #3
 8002c88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c8a:	f7ff f94f 	bl	8001f2c <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c92:	e028      	b.n	8002ce6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	2210      	movs	r2, #16
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e021      	b.n	8002cf4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb0:	f7ff f93c 	bl	8001f2c <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d913      	bls.n	8002ce6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	2210      	movs	r2, #16
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e006      	b.n	8002cf4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d1de      	bne.n	8002cb0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <LL_ADC_IsEnabled>:
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <LL_ADC_IsEnabled+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <LL_ADC_IsEnabled+0x1a>
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <LL_ADC_IsCalibrationOnGoing>:
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0fdb      	lsrs	r3, r3, #31
 8002d2c:	07da      	lsls	r2, r3, #31
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d101      	bne.n	8002d3a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2254      	movs	r2, #84	; 0x54
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_ADCEx_Calibration_Start+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e06c      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0xf4>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2254      	movs	r2, #84	; 0x54
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d66:	2317      	movs	r3, #23
 8002d68:	18fc      	adds	r4, r7, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff ff67 	bl	8002c40 <ADC_Disable>
 8002d72:	0003      	movs	r3, r0
 8002d74:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7ff ffbe 	bl	8002cfc <LL_ADC_IsEnabled>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d14c      	bne.n	8002e1e <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <HAL_ADCEx_Calibration_Start+0xfc>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2103      	movs	r1, #3
 8002dac:	438a      	bics	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	0609      	lsls	r1, r1, #24
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dc2:	e014      	b.n	8002dee <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_ADCEx_Calibration_Start+0x100>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90d      	bls.n	8002dee <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	2212      	movs	r2, #18
 8002dd8:	4393      	bics	r3, r2
 8002dda:	2210      	movs	r2, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2254      	movs	r2, #84	; 0x54
 8002de6:	2100      	movs	r1, #0
 8002de8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e024      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7ff ff93 	bl	8002d1e <LL_ADC_IsCalibrationOnGoing>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d1e3      	bne.n	8002dc4 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1c:	e005      	b.n	8002e2a <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	2210      	movs	r2, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2254      	movs	r2, #84	; 0x54
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e32:	2317      	movs	r3, #23
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b007      	add	sp, #28
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	fffffefd 	.word	0xfffffefd
 8002e44:	0002f1ff 	.word	0x0002f1ff

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e5c:	d828      	bhi.n	8002eb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <__NVIC_SetPriority+0xd4>)
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	33c0      	adds	r3, #192	; 0xc0
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	589b      	ldr	r3, [r3, r2]
 8002e6e:	1dfa      	adds	r2, r7, #7
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	0011      	movs	r1, r2
 8002e74:	2203      	movs	r2, #3
 8002e76:	400a      	ands	r2, r1
 8002e78:	00d2      	lsls	r2, r2, #3
 8002e7a:	21ff      	movs	r1, #255	; 0xff
 8002e7c:	4091      	lsls	r1, r2
 8002e7e:	000a      	movs	r2, r1
 8002e80:	43d2      	mvns	r2, r2
 8002e82:	401a      	ands	r2, r3
 8002e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	22ff      	movs	r2, #255	; 0xff
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	0018      	movs	r0, r3
 8002e94:	2303      	movs	r3, #3
 8002e96:	4003      	ands	r3, r0
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e9c:	481f      	ldr	r0, [pc, #124]	; (8002f1c <__NVIC_SetPriority+0xd4>)
 8002e9e:	1dfb      	adds	r3, r7, #7
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	33c0      	adds	r3, #192	; 0xc0
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002eae:	e031      	b.n	8002f14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <__NVIC_SetPriority+0xd8>)
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	230f      	movs	r3, #15
 8002eba:	400b      	ands	r3, r1
 8002ebc:	3b08      	subs	r3, #8
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3306      	adds	r3, #6
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	18d3      	adds	r3, r2, r3
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1dfa      	adds	r2, r7, #7
 8002ecc:	7812      	ldrb	r2, [r2, #0]
 8002ece:	0011      	movs	r1, r2
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	00d2      	lsls	r2, r2, #3
 8002ed6:	21ff      	movs	r1, #255	; 0xff
 8002ed8:	4091      	lsls	r1, r2
 8002eda:	000a      	movs	r2, r1
 8002edc:	43d2      	mvns	r2, r2
 8002ede:	401a      	ands	r2, r3
 8002ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	401a      	ands	r2, r3
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	4003      	ands	r3, r0
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef8:	4809      	ldr	r0, [pc, #36]	; (8002f20 <__NVIC_SetPriority+0xd8>)
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	001c      	movs	r4, r3
 8002f00:	230f      	movs	r3, #15
 8002f02:	4023      	ands	r3, r4
 8002f04:	3b08      	subs	r3, #8
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	3306      	adds	r3, #6
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	18c3      	adds	r3, r0, r3
 8002f10:	3304      	adds	r3, #4
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b003      	add	sp, #12
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1e5a      	subs	r2, r3, #1
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	045b      	lsls	r3, r3, #17
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d301      	bcc.n	8002f3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e010      	b.n	8002f5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <SysTick_Config+0x44>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	3a01      	subs	r2, #1
 8002f42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f44:	2301      	movs	r3, #1
 8002f46:	425b      	negs	r3, r3
 8002f48:	2103      	movs	r1, #3
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7ff ff7c 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SysTick_Config+0x44>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SysTick_Config+0x44>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	210f      	movs	r1, #15
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff ffbf 	bl	8002f24 <SysTick_Config>
 8002fa6:	0003      	movs	r3, r0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbe:	e14d      	b.n	800325c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4091      	lsls	r1, r2
 8002fca:	000a      	movs	r2, r1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d100      	bne.n	8002fd8 <HAL_GPIO_Init+0x28>
 8002fd6:	e13e      	b.n	8003256 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d005      	beq.n	8002ff0 <HAL_GPIO_Init+0x40>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d130      	bne.n	8003052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	0013      	movs	r3, r2
 8003000:	43da      	mvns	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003026:	2201      	movs	r2, #1
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	43da      	mvns	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	2201      	movs	r2, #1
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
 8003044:	0013      	movs	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2203      	movs	r2, #3
 8003058:	4013      	ands	r3, r2
 800305a:	2b03      	cmp	r3, #3
 800305c:	d017      	beq.n	800308e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	409a      	lsls	r2, r3
 800306c:	0013      	movs	r3, r2
 800306e:	43da      	mvns	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	0013      	movs	r3, r2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2203      	movs	r2, #3
 8003094:	4013      	ands	r3, r2
 8003096:	2b02      	cmp	r3, #2
 8003098:	d123      	bne.n	80030e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	0092      	lsls	r2, r2, #2
 80030a4:	58d3      	ldr	r3, [r2, r3]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2207      	movs	r2, #7
 80030ac:	4013      	ands	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	220f      	movs	r2, #15
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	43da      	mvns	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2107      	movs	r1, #7
 80030c6:	400b      	ands	r3, r1
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	409a      	lsls	r2, r3
 80030cc:	0013      	movs	r3, r2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	6939      	ldr	r1, [r7, #16]
 80030e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	43da      	mvns	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2203      	movs	r2, #3
 8003100:	401a      	ands	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	409a      	lsls	r2, r3
 8003108:	0013      	movs	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	4013      	ands	r3, r2
 8003120:	d100      	bne.n	8003124 <HAL_GPIO_Init+0x174>
 8003122:	e098      	b.n	8003256 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003124:	4a53      	ldr	r2, [pc, #332]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3318      	adds	r3, #24
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	589b      	ldr	r3, [r3, r2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2203      	movs	r2, #3
 8003136:	4013      	ands	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	220f      	movs	r2, #15
 800313c:	409a      	lsls	r2, r3
 800313e:	0013      	movs	r3, r2
 8003140:	43da      	mvns	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	23a0      	movs	r3, #160	; 0xa0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	429a      	cmp	r2, r3
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x1d6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a48      	ldr	r2, [pc, #288]	; (8003278 <HAL_GPIO_Init+0x2c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x1d2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a47      	ldr	r2, [pc, #284]	; (800327c <HAL_GPIO_Init+0x2cc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x1ce>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a46      	ldr	r2, [pc, #280]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x1ca>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a45      	ldr	r2, [pc, #276]	; (8003284 <HAL_GPIO_Init+0x2d4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x1c6>
 8003172:	2304      	movs	r3, #4
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x1d8>
 8003176:	2305      	movs	r3, #5
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x1d8>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x1d8>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x1d8>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x1d8>
 8003186:	2300      	movs	r3, #0
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	2103      	movs	r1, #3
 800318c:	400a      	ands	r2, r1
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4093      	lsls	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003198:	4936      	ldr	r1, [pc, #216]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3318      	adds	r3, #24
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031a6:	4a33      	ldr	r2, [pc, #204]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	58d3      	ldr	r3, [r2, r3]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43da      	mvns	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	025b      	lsls	r3, r3, #9
 80031c0:	4013      	ands	r3, r2
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031cc:	4929      	ldr	r1, [pc, #164]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 80031d6:	2384      	movs	r3, #132	; 0x84
 80031d8:	58d3      	ldr	r3, [r2, r3]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43da      	mvns	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	4013      	ands	r3, r2
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031fa:	491e      	ldr	r1, [pc, #120]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 80031fc:	2284      	movs	r2, #132	; 0x84
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43da      	mvns	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	035b      	lsls	r3, r3, #13
 800321a:	4013      	ands	r3, r2
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43da      	mvns	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	039b      	lsls	r3, r3, #14
 8003244:	4013      	ands	r3, r2
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	40da      	lsrs	r2, r3
 8003264:	1e13      	subs	r3, r2, #0
 8003266:	d000      	beq.n	800326a <HAL_GPIO_Init+0x2ba>
 8003268:	e6aa      	b.n	8002fc0 <HAL_GPIO_Init+0x10>
  }
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021800 	.word	0x40021800
 8003278:	50000400 	.word	0x50000400
 800327c:	50000800 	.word	0x50000800
 8003280:	50000c00 	.word	0x50000c00
 8003284:	50001000 	.word	0x50001000

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	0008      	movs	r0, r1
 8003292:	0011      	movs	r1, r2
 8003294:	1cbb      	adds	r3, r7, #2
 8003296:	1c02      	adds	r2, r0, #0
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	1c7b      	adds	r3, r7, #1
 800329c:	1c0a      	adds	r2, r1, #0
 800329e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a0:	1c7b      	adds	r3, r7, #1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a8:	1cbb      	adds	r3, r7, #2
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b0:	e003      	b.n	80032ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032b2:	1cbb      	adds	r3, r7, #2
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b002      	add	sp, #8
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d11f      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	0013      	movs	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4912      	ldr	r1, [pc, #72]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fc ff04 	bl	8000104 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003302:	e008      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e001      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e009      	b.n	800332a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	401a      	ands	r2, r3
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	429a      	cmp	r2, r3
 8003326:	d0ed      	beq.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40007000 	.word	0x40007000
 8003338:	fffff9ff 	.word	0xfffff9ff
 800333c:	20000004 	.word	0x20000004
 8003340:	000f4240 	.word	0x000f4240

08003344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f000 fb56 	bl	8003a04 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	d100      	bne.n	8003364 <HAL_RCC_OscConfig+0x20>
 8003362:	e07d      	b.n	8003460 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003364:	4bc3      	ldr	r3, [pc, #780]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2238      	movs	r2, #56	; 0x38
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336e:	4bc1      	ldr	r3, [pc, #772]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2203      	movs	r2, #3
 8003374:	4013      	ands	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b10      	cmp	r3, #16
 800337c:	d102      	bne.n	8003384 <HAL_RCC_OscConfig+0x40>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d002      	beq.n	800338a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4bba      	ldr	r3, [pc, #744]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	029b      	lsls	r3, r3, #10
 8003392:	4013      	ands	r3, r2
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x11a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d15f      	bne.n	800345e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f000 fb30 	bl	8003a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x7c>
 80033b0:	4bb0      	ldr	r3, [pc, #704]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4baf      	ldr	r3, [pc, #700]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0249      	lsls	r1, r1, #9
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e020      	b.n	8003402 <HAL_RCC_OscConfig+0xbe>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	23a0      	movs	r3, #160	; 0xa0
 80033c6:	02db      	lsls	r3, r3, #11
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d10e      	bne.n	80033ea <HAL_RCC_OscConfig+0xa6>
 80033cc:	4ba9      	ldr	r3, [pc, #676]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4ba8      	ldr	r3, [pc, #672]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	02c9      	lsls	r1, r1, #11
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	4ba6      	ldr	r3, [pc, #664]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4ba5      	ldr	r3, [pc, #660]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	0249      	lsls	r1, r1, #9
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0xbe>
 80033ea:	4ba2      	ldr	r3, [pc, #648]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4ba1      	ldr	r3, [pc, #644]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033f0:	49a1      	ldr	r1, [pc, #644]	; (8003678 <HAL_RCC_OscConfig+0x334>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b9f      	ldr	r3, [pc, #636]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b9e      	ldr	r3, [pc, #632]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80033fc:	499f      	ldr	r1, [pc, #636]	; (800367c <HAL_RCC_OscConfig+0x338>)
 80033fe:	400a      	ands	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fd8f 	bl	8001f2c <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fd8a 	bl	8001f2c <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2ee      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003426:	4b93      	ldr	r3, [pc, #588]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	029b      	lsls	r3, r3, #10
 800342e:	4013      	ands	r3, r2
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xd0>
 8003432:	e015      	b.n	8003460 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fd7a 	bl	8001f2c <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343e:	f7fe fd75 	bl	8001f2c <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e2d9      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	4013      	ands	r3, r2
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0xfa>
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d100      	bne.n	800346c <HAL_RCC_OscConfig+0x128>
 800346a:	e099      	b.n	80035a0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2238      	movs	r2, #56	; 0x38
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2203      	movs	r2, #3
 800347c:	4013      	ands	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x148>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d002      	beq.n	8003492 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d135      	bne.n	80034fe <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003492:	4b78      	ldr	r3, [pc, #480]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4013      	ands	r3, r2
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x166>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e2ac      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a74      	ldr	r2, [pc, #464]	; (8003680 <HAL_RCC_OscConfig+0x33c>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	4b6e      	ldr	r3, [pc, #440]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034c6:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x340>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	4b67      	ldr	r3, [pc, #412]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80034da:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x344>)
 80034e6:	40da      	lsrs	r2, r3
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x348>)
 80034ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x34c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe fcbf 	bl	8001e74 <HAL_InitTick>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d051      	beq.n	800359e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e282      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d030      	beq.n	8003568 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x340>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800351a:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b55      	ldr	r3, [pc, #340]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0049      	lsls	r1, r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fd00 	bl	8001f2c <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe fcfb 	bl	8001f2c <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e25f      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_RCC_OscConfig+0x33c>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	021a      	lsls	r2, r3, #8
 8003560:	4b44      	ldr	r3, [pc, #272]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003568:	4b42      	ldr	r3, [pc, #264]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800356e:	4949      	ldr	r1, [pc, #292]	; (8003694 <HAL_RCC_OscConfig+0x350>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fcda 	bl	8001f2c <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe fcd5 	bl	8001f2c <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e239      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003590:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4013      	ands	r3, r2
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x23a>
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	4013      	ands	r3, r2
 80035a8:	d047      	beq.n	800363a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80035aa:	4b32      	ldr	r3, [pc, #200]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2238      	movs	r2, #56	; 0x38
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b18      	cmp	r3, #24
 80035b4:	d10a      	bne.n	80035cc <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d03c      	beq.n	800363a <HAL_RCC_OscConfig+0x2f6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d138      	bne.n	800363a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e21b      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80035d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035d8:	4b26      	ldr	r3, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80035da:	2101      	movs	r1, #1
 80035dc:	430a      	orrs	r2, r1
 80035de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fca4 	bl	8001f2c <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe fc9f 	bl	8001f2c <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e203      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d0f1      	beq.n	80035ea <HAL_RCC_OscConfig+0x2a6>
 8003606:	e018      	b.n	800363a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800360a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fc8a 	bl	8001f2c <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe fc85 	bl	8001f2c <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1e9      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	2202      	movs	r2, #2
 8003636:	4013      	ands	r3, r2
 8003638:	d1f1      	bne.n	800361e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <HAL_RCC_OscConfig+0x302>
 8003644:	e0c6      	b.n	80037d4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	231f      	movs	r3, #31
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2238      	movs	r2, #56	; 0x38
 8003654:	4013      	ands	r3, r2
 8003656:	2b20      	cmp	r3, #32
 8003658:	d11e      	bne.n	8003698 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x330>)
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d100      	bne.n	8003666 <HAL_RCC_OscConfig+0x322>
 8003664:	e0b6      	b.n	80037d4 <HAL_RCC_OscConfig+0x490>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d000      	beq.n	8003670 <HAL_RCC_OscConfig+0x32c>
 800366e:	e0b1      	b.n	80037d4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e1c7      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
 8003674:	40021000 	.word	0x40021000
 8003678:	fffeffff 	.word	0xfffeffff
 800367c:	fffbffff 	.word	0xfffbffff
 8003680:	ffff80ff 	.word	0xffff80ff
 8003684:	ffffc7ff 	.word	0xffffc7ff
 8003688:	00f42400 	.word	0x00f42400
 800368c:	20000004 	.word	0x20000004
 8003690:	20000008 	.word	0x20000008
 8003694:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003698:	4bb8      	ldr	r3, [pc, #736]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800369a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	055b      	lsls	r3, r3, #21
 80036a0:	4013      	ands	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_OscConfig+0x364>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x366>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4bb3      	ldr	r3, [pc, #716]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80036b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b2:	4bb2      	ldr	r3, [pc, #712]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	0549      	lsls	r1, r1, #21
 80036b8:	430a      	orrs	r2, r1
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80036bc:	4baf      	ldr	r3, [pc, #700]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80036be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	055b      	lsls	r3, r3, #21
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80036ca:	231f      	movs	r3, #31
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d2:	4bab      	ldr	r3, [pc, #684]	; (8003980 <HAL_RCC_OscConfig+0x63c>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4013      	ands	r3, r2
 80036dc:	d11a      	bne.n	8003714 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036de:	4ba8      	ldr	r3, [pc, #672]	; (8003980 <HAL_RCC_OscConfig+0x63c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4ba7      	ldr	r3, [pc, #668]	; (8003980 <HAL_RCC_OscConfig+0x63c>)
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	0049      	lsls	r1, r1, #1
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fc1e 	bl	8001f2c <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe fc19 	bl	8001f2c <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e17d      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCC_OscConfig+0x63c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4013      	ands	r3, r2
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x3e6>
 800371c:	4b97      	ldr	r3, [pc, #604]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800371e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003720:	4b96      	ldr	r3, [pc, #600]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	65da      	str	r2, [r3, #92]	; 0x5c
 8003728:	e01c      	b.n	8003764 <HAL_RCC_OscConfig+0x420>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b05      	cmp	r3, #5
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x408>
 8003732:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003736:	4b91      	ldr	r3, [pc, #580]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003738:	2104      	movs	r1, #4
 800373a:	430a      	orrs	r2, r1
 800373c:	65da      	str	r2, [r3, #92]	; 0x5c
 800373e:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003742:	4b8e      	ldr	r3, [pc, #568]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003744:	2101      	movs	r1, #1
 8003746:	430a      	orrs	r2, r1
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0x420>
 800374c:	4b8b      	ldr	r3, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800374e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003750:	4b8a      	ldr	r3, [pc, #552]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003752:	2101      	movs	r1, #1
 8003754:	438a      	bics	r2, r1
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c
 8003758:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800375a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800375c:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800375e:	2104      	movs	r1, #4
 8003760:	438a      	bics	r2, r1
 8003762:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d014      	beq.n	8003796 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fe fbde 	bl	8001f2c <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003774:	e009      	b.n	800378a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fe fbd9 	bl	8001f2c <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	4a80      	ldr	r2, [pc, #512]	; (8003984 <HAL_RCC_OscConfig+0x640>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e13c      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	4b7c      	ldr	r3, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x432>
 8003794:	e013      	b.n	80037be <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe fbc9 	bl	8001f2c <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379e:	e009      	b.n	80037b4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe fbc4 	bl	8001f2c <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	4a76      	ldr	r2, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x640>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e127      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b71      	ldr	r3, [pc, #452]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b6c      	ldr	r3, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80037ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80037ce:	496e      	ldr	r1, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x644>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2220      	movs	r2, #32
 80037da:	4013      	ands	r3, r2
 80037dc:	d039      	beq.n	8003852 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01b      	beq.n	800381e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b64      	ldr	r3, [pc, #400]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	03c9      	lsls	r1, r1, #15
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe fb9a 	bl	8001f2c <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037fe:	f7fe fb95 	bl	8001f2c <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0f9      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003810:	4b5a      	ldr	r3, [pc, #360]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	4013      	ands	r3, r2
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x4ba>
 800381c:	e019      	b.n	8003852 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381e:	4b57      	ldr	r3, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b56      	ldr	r3, [pc, #344]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003824:	4959      	ldr	r1, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x648>)
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fb7f 	bl	8001f2c <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003834:	f7fe fb7a 	bl	8001f2c <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0de      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003846:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	4013      	ands	r3, r2
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d100      	bne.n	800385c <HAL_RCC_OscConfig+0x518>
 800385a:	e0d2      	b.n	8003a02 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2238      	movs	r2, #56	; 0x38
 8003862:	4013      	ands	r3, r2
 8003864:	2b10      	cmp	r3, #16
 8003866:	d100      	bne.n	800386a <HAL_RCC_OscConfig+0x526>
 8003868:	e081      	b.n	800396e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d156      	bne.n	8003920 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003878:	4945      	ldr	r1, [pc, #276]	; (8003990 <HAL_RCC_OscConfig+0x64c>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe fb55 	bl	8001f2c <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fb50 	bl	8001f2c <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0b4      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389a:	4b38      	ldr	r3, [pc, #224]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	049b      	lsls	r3, r3, #18
 80038a2:	4013      	ands	r3, r2
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a6:	4b35      	ldr	r3, [pc, #212]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x650>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	431a      	orrs	r2, r3
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	0449      	lsls	r1, r1, #17
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_RCC_OscConfig+0x638>)
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	0549      	lsls	r1, r1, #21
 80038f2:	430a      	orrs	r2, r1
 80038f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fb19 	bl	8001f2c <HAL_GetTick>
 80038fa:	0003      	movs	r3, r0
 80038fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fb14 	bl	8001f2c <HAL_GetTick>
 8003904:	0002      	movs	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e078      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	049b      	lsls	r3, r3, #18
 800391a:	4013      	ands	r3, r2
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x5bc>
 800391e:	e070      	b.n	8003a02 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003926:	491a      	ldr	r1, [pc, #104]	; (8003990 <HAL_RCC_OscConfig+0x64c>)
 8003928:	400a      	ands	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003932:	2103      	movs	r1, #3
 8003934:	438a      	bics	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCC_OscConfig+0x638>)
 800393e:	4916      	ldr	r1, [pc, #88]	; (8003998 <HAL_RCC_OscConfig+0x654>)
 8003940:	400a      	ands	r2, r1
 8003942:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe faf2 	bl	8001f2c <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe faed 	bl	8001f2c <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e051      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x638>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	049b      	lsls	r3, r3, #18
 8003968:	4013      	ands	r3, r2
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x60a>
 800396c:	e049      	b.n	8003a02 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d112      	bne.n	800399c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e044      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	00001388 	.word	0x00001388
 8003988:	efffffff 	.word	0xefffffff
 800398c:	ffbfffff 	.word	0xffbfffff
 8003990:	feffffff 	.word	0xfeffffff
 8003994:	11c1808c 	.word	0x11c1808c
 8003998:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCC_OscConfig+0x6c8>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2203      	movs	r2, #3
 80039a6:	401a      	ands	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d126      	bne.n	80039fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2270      	movs	r2, #112	; 0x70
 80039b4:	401a      	ands	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11f      	bne.n	80039fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	23fe      	movs	r3, #254	; 0xfe
 80039c2:	01db      	lsls	r3, r3, #7
 80039c4:	401a      	ands	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d116      	bne.n	80039fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	23f8      	movs	r3, #248	; 0xf8
 80039d4:	039b      	lsls	r3, r3, #14
 80039d6:	401a      	ands	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10e      	bne.n	80039fe <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	23e0      	movs	r3, #224	; 0xe0
 80039e4:	051b      	lsls	r3, r3, #20
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	0f5b      	lsrs	r3, r3, #29
 80039f4:	075a      	lsls	r2, r3, #29
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b008      	add	sp, #32
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0e9      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2207      	movs	r2, #7
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d91e      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2207      	movs	r2, #7
 8003a38:	4393      	bics	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	4b70      	ldr	r3, [pc, #448]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a44:	f7fe fa72 	bl	8001f2c <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a4c:	e009      	b.n	8003a62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4e:	f7fe fa6d 	bl	8001f2c <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	4a6a      	ldr	r2, [pc, #424]	; (8003c04 <HAL_RCC_ClockConfig+0x1f4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0ca      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2207      	movs	r2, #7
 8003a68:	4013      	ands	r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	4013      	ands	r3, r2
 8003a82:	d006      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8a:	21e0      	movs	r1, #224	; 0xe0
 8003a8c:	01c9      	lsls	r1, r1, #7
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_RCC_ClockConfig+0x1fc>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d057      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	029b      	lsls	r3, r3, #10
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d12b      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e097      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad0:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	049b      	lsls	r3, r3, #18
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d11f      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e08b      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae8:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4013      	ands	r3, r2
 8003af2:	d113      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e07f      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b00:	4b41      	ldr	r3, [pc, #260]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d108      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e074      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	4b3e      	ldr	r3, [pc, #248]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e06d      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b1c:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2207      	movs	r2, #7
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fe f9fc 	bl	8001f2c <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b38:	e009      	b.n	8003b4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3a:	f7fe f9f7 	bl	8001f2c <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <HAL_RCC_ClockConfig+0x1f4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e054      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2238      	movs	r2, #56	; 0x38
 8003b54:	401a      	ands	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1ec      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2207      	movs	r2, #7
 8003b66:	4013      	ands	r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d21e      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2207      	movs	r2, #7
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b80:	f7fe f9d4 	bl	8001f2c <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8a:	f7fe f9cf 	bl	8001f2c <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_RCC_ClockConfig+0x1f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e02c      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1ee      	bne.n	8003b8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <HAL_RCC_ClockConfig+0x200>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bca:	f000 f829 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bce:	0001      	movs	r1, r0
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	401a      	ands	r2, r3
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x204>)
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	58d3      	ldr	r3, [r2, r3]
 8003be0:	221f      	movs	r2, #31
 8003be2:	4013      	ands	r3, r2
 8003be4:	000a      	movs	r2, r1
 8003be6:	40da      	lsrs	r2, r3
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x208>)
 8003bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_ClockConfig+0x20c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fe f93f 	bl	8001e74 <HAL_InitTick>
 8003bf6:	0003      	movs	r3, r0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40022000 	.word	0x40022000
 8003c04:	00001388 	.word	0x00001388
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	fffff0ff 	.word	0xfffff0ff
 8003c10:	ffff8fff 	.word	0xffff8fff
 8003c14:	0800428c 	.word	0x0800428c
 8003c18:	20000004 	.word	0x20000004
 8003c1c:	20000008 	.word	0x20000008

08003c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c26:	4b3c      	ldr	r3, [pc, #240]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2238      	movs	r2, #56	; 0x38
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d10f      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0adb      	lsrs	r3, r3, #11
 8003c36:	2207      	movs	r2, #7
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	0013      	movs	r3, r2
 8003c40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	4835      	ldr	r0, [pc, #212]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c46:	f7fc fa5d 	bl	8000104 <__udivsi3>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e05d      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2238      	movs	r2, #56	; 0x38
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	e054      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2238      	movs	r2, #56	; 0x38
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d138      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	3301      	adds	r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4824      	ldr	r0, [pc, #144]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c90:	f7fc fa38 	bl	8000104 <__udivsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	0019      	movs	r1, r3
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	227f      	movs	r2, #127	; 0x7f
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	434b      	muls	r3, r1
 8003ca4:	617b      	str	r3, [r7, #20]
        break;
 8003ca6:	e00d      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	481c      	ldr	r0, [pc, #112]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cac:	f7fc fa2a 	bl	8000104 <__udivsi3>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	227f      	movs	r2, #127	; 0x7f
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	434b      	muls	r3, r1
 8003cc0:	617b      	str	r3, [r7, #20]
        break;
 8003cc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0f5b      	lsrs	r3, r3, #29
 8003cca:	2207      	movs	r2, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	3301      	adds	r3, #1
 8003cd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f7fc fa15 	bl	8000104 <__udivsi3>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e015      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2238      	movs	r2, #56	; 0x38
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d103      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2238      	movs	r2, #56	; 0x38
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b18      	cmp	r3, #24
 8003cfe:	d103      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d00:	23fa      	movs	r3, #250	; 0xfa
 8003d02:	01db      	lsls	r3, r3, #7
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e001      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d0c:	693b      	ldr	r3, [r7, #16]
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b006      	add	sp, #24
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003d2c:	2313      	movs	r3, #19
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2312      	movs	r3, #18
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	4013      	ands	r3, r2
 8003d46:	d100      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d48:	e0ad      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2011      	movs	r0, #17
 8003d4c:	183b      	adds	r3, r7, r0
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	055b      	lsls	r3, r3, #21
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d110      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	0549      	lsls	r1, r1, #21
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d6c:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	055b      	lsls	r3, r3, #21
 8003d74:	4013      	ands	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b3c      	ldr	r3, [pc, #240]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	0049      	lsls	r1, r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8e:	f7fe f8cd 	bl	8001f2c <HAL_GetTick>
 8003d92:	0003      	movs	r3, r0
 8003d94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d96:	e00b      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7fe f8c8 	bl	8001f2c <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d904      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003da6:	2313      	movs	r3, #19
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	2203      	movs	r2, #3
 8003dac:	701a      	strb	r2, [r3, #0]
        break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db0:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	d0ed      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003dbc:	2313      	movs	r3, #19
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d15e      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dca:	23c0      	movs	r3, #192	; 0xc0
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d019      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d014      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dec:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df0:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	0249      	lsls	r1, r1, #9
 8003df6:	430a      	orrs	r2, r1
 8003df8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e00:	491e      	ldr	r1, [pc, #120]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d016      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe f88a 	bl	8001f2c <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f885 	bl	8001f2c <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d904      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003e2e:	2313      	movs	r3, #19
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	2203      	movs	r2, #3
 8003e34:	701a      	strb	r2, [r3, #0]
            break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d0ed      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003e42:	2313      	movs	r3, #19
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e60:	e016      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e62:	2312      	movs	r3, #18
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2213      	movs	r2, #19
 8003e68:	18ba      	adds	r2, r7, r2
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40007000 	.word	0x40007000
 8003e78:	fffffcff 	.word	0xfffffcff
 8003e7c:	fffeffff 	.word	0xfffeffff
 8003e80:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	2312      	movs	r3, #18
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2213      	movs	r2, #19
 8003e8a:	18ba      	adds	r2, r7, r2
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e90:	2311      	movs	r3, #17
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9a:	4bb6      	ldr	r3, [pc, #728]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e9e:	4bb5      	ldr	r3, [pc, #724]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ea0:	49b5      	ldr	r1, [pc, #724]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb0:	4bb0      	ldr	r3, [pc, #704]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4bad      	ldr	r3, [pc, #692]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ece:	4ba9      	ldr	r3, [pc, #676]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4ba5      	ldr	r3, [pc, #660]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eec:	4ba1      	ldr	r3, [pc, #644]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2230      	movs	r2, #48	; 0x30
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4b9e      	ldr	r3, [pc, #632]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003efc:	430a      	orrs	r2, r1
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2210      	movs	r2, #16
 8003f06:	4013      	ands	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0a:	4b9a      	ldr	r3, [pc, #616]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	4a9b      	ldr	r2, [pc, #620]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	4b96      	ldr	r3, [pc, #600]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	015b      	lsls	r3, r3, #5
 8003f26:	4013      	ands	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003f2a:	4b92      	ldr	r3, [pc, #584]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	4a94      	ldr	r2, [pc, #592]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	4b8e      	ldr	r3, [pc, #568]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b8a      	ldr	r3, [pc, #552]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4a8d      	ldr	r2, [pc, #564]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4013      	ands	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	4b82      	ldr	r3, [pc, #520]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	4a86      	ldr	r2, [pc, #536]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	0019      	movs	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	4b7e      	ldr	r3, [pc, #504]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2220      	movs	r2, #32
 8003f84:	4013      	ands	r3, r2
 8003f86:	d009      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f88:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	4a7f      	ldr	r2, [pc, #508]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	4b77      	ldr	r3, [pc, #476]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2240      	movs	r2, #64	; 0x40
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b73      	ldr	r3, [pc, #460]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	4a79      	ldr	r2, [pc, #484]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	0019      	movs	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d015      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc6:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	0899      	lsrs	r1, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd2:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	05db      	lsls	r3, r3, #23
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fe4:	4b63      	ldr	r3, [pc, #396]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	4b62      	ldr	r3, [pc, #392]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	0249      	lsls	r1, r1, #9
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ffe:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	2240      	movs	r2, #64	; 0x40
 8004004:	4393      	bics	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800400e:	430a      	orrs	r2, r1
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	039b      	lsls	r3, r3, #14
 800401a:	4013      	ands	r3, r2
 800401c:	d016      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800401e:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	4a5c      	ldr	r2, [pc, #368]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	4b51      	ldr	r3, [pc, #324]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800402e:	430a      	orrs	r2, r1
 8004030:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	03db      	lsls	r3, r3, #15
 800403a:	429a      	cmp	r2, r3
 800403c:	d106      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	0449      	lsls	r1, r1, #17
 8004048:	430a      	orrs	r2, r1
 800404a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	03db      	lsls	r3, r3, #15
 8004054:	4013      	ands	r3, r2
 8004056:	d016      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004058:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800405e:	4013      	ands	r3, r2
 8004060:	0019      	movs	r1, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004068:	430a      	orrs	r2, r1
 800406a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	045b      	lsls	r3, r3, #17
 8004074:	429a      	cmp	r2, r3
 8004076:	d106      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	0449      	lsls	r1, r1, #17
 8004082:	430a      	orrs	r2, r1
 8004084:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	4013      	ands	r3, r2
 8004090:	d014      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	2203      	movs	r2, #3
 8004098:	4393      	bics	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d106      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0249      	lsls	r1, r1, #9
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	019b      	lsls	r3, r3, #6
 80040c4:	4013      	ands	r3, r2
 80040c6:	d014      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	220c      	movs	r2, #12
 80040ce:	4393      	bics	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d106      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4b22      	ldr	r3, [pc, #136]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	0249      	lsls	r1, r1, #9
 80040ee:	430a      	orrs	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	045b      	lsls	r3, r3, #17
 80040fa:	4013      	ands	r3, r2
 80040fc:	d016      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004104:	4013      	ands	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800410e:	430a      	orrs	r2, r1
 8004110:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	429a      	cmp	r2, r3
 800411c:	d106      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	0449      	lsls	r1, r1, #17
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	049b      	lsls	r3, r3, #18
 8004134:	4013      	ands	r3, r2
 8004136:	d016      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800413e:	4013      	ands	r3, r2
 8004140:	0019      	movs	r1, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004148:	430a      	orrs	r2, r1
 800414a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	429a      	cmp	r2, r3
 8004156:	d106      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	0449      	lsls	r1, r1, #17
 8004162:	430a      	orrs	r2, r1
 8004164:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004166:	2312      	movs	r3, #18
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b006      	add	sp, #24
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	efffffff 	.word	0xefffffff
 800417c:	fffff3ff 	.word	0xfffff3ff
 8004180:	fffffcff 	.word	0xfffffcff
 8004184:	fff3ffff 	.word	0xfff3ffff
 8004188:	ffcfffff 	.word	0xffcfffff
 800418c:	ffffcfff 	.word	0xffffcfff
 8004190:	ffff3fff 	.word	0xffff3fff
 8004194:	ffbfffff 	.word	0xffbfffff
 8004198:	feffffff 	.word	0xfeffffff

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	2600      	movs	r6, #0
 80041a0:	4d0c      	ldr	r5, [pc, #48]	; (80041d4 <__libc_init_array+0x38>)
 80041a2:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	2600      	movs	r6, #0
 80041ae:	f000 f821 	bl	80041f4 <_init>
 80041b2:	4d0a      	ldr	r5, [pc, #40]	; (80041dc <__libc_init_array+0x40>)
 80041b4:	4c0a      	ldr	r4, [pc, #40]	; (80041e0 <__libc_init_array+0x44>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	00b3      	lsls	r3, r6, #2
 80041c2:	58eb      	ldr	r3, [r5, r3]
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	00b3      	lsls	r3, r6, #2
 80041cc:	58eb      	ldr	r3, [r5, r3]
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	080042cc 	.word	0x080042cc
 80041d8:	080042cc 	.word	0x080042cc
 80041dc:	080042cc 	.word	0x080042cc
 80041e0:	080042d0 	.word	0x080042d0

080041e4 <memset>:
 80041e4:	0003      	movs	r3, r0
 80041e6:	1882      	adds	r2, r0, r2
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	7019      	strb	r1, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
